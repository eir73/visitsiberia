{"version":3,"names":[],"mappings":"","sources":["jquery.datepick.js"],"sourcesContent":["/*! http://keith-wood.name/datepick.html\r\n\tDate picker for jQuery v5.1.1.\r\n\tWritten by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\r\n\tLicensed under the MIT (http://keith-wood.name/licence.html) licence. \r\n\tPlease attribute the author if you use it. */\r\n\r\n(function($) { // Hide scope, no $ conflict\r\n\t'use strict';\r\n\r\n\tvar pluginName = 'datepick';\r\n\r\n\r\n\t/** Create the datepicker plugin.\r\n\t\t<p>Sets an input field to popup a calendar for date entry,\r\n\t\t\tor a <code>div</code> or <code>span</code> to show an inline calendar.</p>\r\n\t\t<p>Expects HTML like:</p>\r\n\t\t<pre>&lt;input type=\"text\"></pre>\r\n\t\t<p>or</p>\r\n\t\t<pre>&lt;div>&lt;/div></pre>\r\n\t\t<p>Provide inline configuration like:</p>\r\n\t\t<pre>&lt;input type=\"text\" data-datepick=\"name: 'value',...\"/></pre>\r\n\t\t@module Datepick\r\n\t\t@augments JQPlugin\r\n\t\t@example $(selector).datepick()\r\n$(selector).datepick({minDate: 0, maxDate: '+1m +1w'}) */\r\n\t$.JQPlugin.createPlugin({\r\n\r\n\t\t/** The name of the plugin.\r\n\t\t\t@default 'datepick' */\r\n\t\tname: pluginName,\r\n\r\n\t\t/** Default template for generating a datepicker.\r\n\t\t\tInsert anywhere: '{l10n:name}' to insert localised value for name,\r\n\t\t\t'{link:name}' to insert a link trigger for command name,\r\n\t\t\t'{button:name}' to insert a button trigger for command name,\r\n\t\t\t'{popup:start}...{popup:end}' to mark a section for inclusion in a popup datepicker only,\r\n\t\t\t'{inline:start}...{inline:end}' to mark a section for inclusion in an inline datepicker only.\r\n\t\t\t@property {string} picker Overall structure: '{months}' to insert calendar months.\r\n\t\t\t@property {string} monthRow One row of months: '{months}' to insert calendar months.\r\n\t\t\t@property {string} month A single month: '{monthHeader<em>:dateFormat</em>}' to insert the month header -\r\n\t\t\t\t\t\t<em>dateFormat</em> is optional and defaults to 'MM yyyy',\r\n\t\t\t\t\t\t'{weekHeader}' to insert a week header, '{weeks}' to insert the month's weeks.\r\n\t\t\t@property {string} weekHeader A week header: '{days}' to insert individual day names.\r\n\t\t\t@property {string} dayHeader Individual day header: '{day}' to insert day name.\r\n\t\t\t@property {string} week One week of the month: '{days}' to insert the week's days,\r\n\t\t\t\t\t\t'{weekOfYear}' to insert week of year.\r\n\t\t\t@property {string} day An individual day: '{day}' to insert day value.\r\n\t\t\t@property {string} monthSelector jQuery selector, relative to picker, for a single month.\r\n\t\t\t@property {string} daySelector jQuery selector, relative to picker, for individual days.\r\n\t\t\t@property {string} rtlClass Class for right-to-left (RTL) languages.\r\n\t\t\t@property {string} multiClass Class for multi-month datepickers.\r\n\t\t\t@property {string} defaultClass Class for selectable dates.\r\n\t\t\t@property {string} selectedClass Class for currently selected dates.\r\n\t\t\t@property {string} highlightedClass Class for highlighted dates.\r\n\t\t\t@property {string} todayClass Class for today.\r\n\t\t\t@property {string} otherMonthClass Class for days from other months.\r\n\t\t\t@property {string} weekendClass Class for days on weekends.\r\n\t\t\t@property {string} commandClass Class prefix for commands.\r\n\t\t\t@property {string} commandButtonClass Extra class(es) for commands that are buttons.\r\n\t\t\t@property {string} commandLinkClass Extra class(es) for commands that are links.\r\n\t\t\t@property {string} disabledClass Class for disabled commands. */\r\n\t\tdefaultRenderer: {\r\n\t\t\tpicker: '<div class=\"datepick\">' +\r\n\t\t\t'<div class=\"datepick-nav\">{link:prev}{link:today}{link:next}</div>{months}' +\r\n\t\t\t'{popup:start}<div class=\"datepick-ctrl\">{link:clear}{link:close}</div>{popup:end}' +\r\n\t\t\t'<div class=\"datepick-clear-fix\"></div></div>',\r\n\t\t\tmonthRow: '<div class=\"datepick-month-row\">{months}</div>',\r\n\t\t\tmonth: '<div class=\"datepick-month\"><div class=\"datepick-month-header\">{monthHeader}</div>' +\r\n\t\t\t'<table><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>',\r\n\t\t\tweekHeader: '<tr>{days}</tr>',\r\n\t\t\tdayHeader: '<th>{day}</th>',\r\n\t\t\tweek: '<tr>{days}</tr>',\r\n\t\t\tday: '<td>{day}</td>',\r\n\t\t\tmonthSelector: '.datepick-month',\r\n\t\t\tdaySelector: 'td',\r\n\t\t\trtlClass: 'datepick-rtl',\r\n\t\t\tmultiClass: 'datepick-multi',\r\n\t\t\tdefaultClass: '',\r\n\t\t\tselectedClass: 'datepick-selected',\r\n\t\t\thighlightedClass: 'datepick-highlight',\r\n\t\t\ttodayClass: 'datepick-today',\r\n\t\t\totherMonthClass: 'datepick-other-month',\r\n\t\t\tweekendClass: 'datepick-weekend',\r\n\t\t\tcommandClass: 'datepick-cmd',\r\n\t\t\tcommandButtonClass: '',\r\n\t\t\tcommandLinkClass: '',\r\n\t\t\tdisabledClass: 'datepick-disabled'\r\n\t\t},\r\n\r\n\t\t/** Command actions that may be added to a layout by name.\r\n\t\t\t<ul>\r\n\t\t\t<li>prev - Show the previous month (based on <code>monthsToStep</code> option) - <em>PageUp</em></li>\r\n\t\t\t<li>prevJump - Show the previous year (based on <code>monthsToJump</code> option) - <em>Ctrl+PageUp</em></li>\r\n\t\t\t<li>next - Show the next month (based on <code>monthsToStep</code> option) - <em>PageDown</em></li>\r\n\t\t\t<li>nextJump - Show the next year (based on <code>monthsToJump</code> option) - <em>Ctrl+PageDown</em></li>\r\n\t\t\t<li>current - Show the currently selected month or today's if none selected - <em>Ctrl+Home</em></li>\r\n\t\t\t<li>today - Show today's month - <em>Ctrl+Home</em></li>\r\n\t\t\t<li>clear - Erase the date and close the datepicker popup - <em>Ctrl+End</em></li>\r\n\t\t\t<li>close - Close the datepicker popup - <em>Esc</em></li>\r\n\t\t\t<li>prevWeek - Move the cursor to the previous week - <em>Ctrl+Up</em></li>\r\n\t\t\t<li>prevDay - Move the cursor to the previous day - <em>Ctrl+Left</em></li>\r\n\t\t\t<li>nextDay - Move the cursor to the next day - <em>Ctrl+Right</em></li>\r\n\t\t\t<li>nextWeek - Move the cursor to the next week - <em>Ctrl+Down</em></li>\r\n\t\t\t</ul>\r\n\t\t\tThe command name is the key name and is used to add the command to a layout\r\n\t\t\twith '{button:name}' or '{link:name}'. Each has the following attributes:\r\n\t\t\t@property {string} text The field in the regional settings for the displayed text.\r\n\t\t\t@property {string} status The field in the regional settings for the status text.\r\n\t\t\t@property {object} keystroke The keystroke to trigger the action.\r\n\t\t\t@property {number} keystroke.keyCode The code for the keystroke.\r\n\t\t\t@property {boolean} keystroke.ctrlKey <code>true</code> if <em>Ctrl</em> is required,\r\n\t\t\t@property {boolean} keystroke.altKey <code>true</code> if <em>Alt</em> is required,\r\n\t\t\t@property {boolean} keystroke.shiftKey <code>true</code> if <em>Shift</em> is required.\r\n\t\t\t@property {DatepickCommandEnabled} enabled The function that indicates the command is enabled.\r\n\t\t\t@property {DatepickCommandDate} date The function to get the date associated with this action.\r\n\t\t\t@property {DatepickCommandAction} action The function that implements the action. */\r\n\t\tcommands: {\r\n\t\t\tprev: {text: 'prevText', status: 'prevStatus', // Previous month\r\n\t\t\t\tkeystroke: {keyCode: 33}, // Page up\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\treturn (!minDate || plugin.add(plugin.day(\r\n\t\t\t\t\t\tplugin._applyMonthsOffset(plugin.add(plugin.newDate(inst.drawDate),\r\n\t\t\t\t\t\t1 - inst.options.monthsToStep, 'm'), inst), 1), -1, 'd').\r\n\t\t\t\t\t\tgetTime() >= minDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) {\r\n\t\t\t\t\treturn plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), -inst.options.monthsToStep, 'm'), inst), 1);\r\n\t\t\t\t},\r\n\t\t\t\taction: function(inst) {\r\n\t\t\t\t\tplugin.changeMonth(this, -inst.options.monthsToStep);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tprevJump: {text: 'prevJumpText', status: 'prevJumpStatus', // Previous year\r\n\t\t\t\tkeystroke: {keyCode: 33, ctrlKey: true}, // Ctrl + Page up\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\treturn (!minDate || plugin.add(plugin.day(\r\n\t\t\t\t\t\tplugin._applyMonthsOffset(plugin.add(plugin.newDate(inst.drawDate),\r\n\t\t\t\t\t\t1 - inst.options.monthsToJump, 'm'), inst), 1), -1, 'd').\r\n\t\t\t\t\t\tgetTime() >= minDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) {\r\n\t\t\t\t\treturn plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), -inst.options.monthsToJump, 'm'), inst), 1);\r\n\t\t\t\t},\r\n\t\t\t\taction: function(inst) {\r\n\t\t\t\t\tplugin.changeMonth(this, -inst.options.monthsToJump);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnext: {text: 'nextText', status: 'nextStatus', // Next month\r\n\t\t\t\tkeystroke: {keyCode: 34}, // Page down\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\treturn (!maxDate || plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), inst.options.monthsToStep, 'm'), inst), 1).\r\n\t\t\t\t\t\tgetTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) {\r\n\t\t\t\t\treturn plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), inst.options.monthsToStep, 'm'), inst), 1);\r\n\t\t\t\t},\r\n\t\t\t\taction: function(inst) {\r\n\t\t\t\t\tplugin.changeMonth(this, inst.options.monthsToStep);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnextJump: {text: 'nextJumpText', status: 'nextJumpStatus', // Next year\r\n\t\t\t\tkeystroke: {keyCode: 34, ctrlKey: true}, // Ctrl + Page down\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\treturn (!maxDate || plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), inst.options.monthsToJump, 'm'), inst), 1).\r\n\t\t\t\t\t\tgetTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) {\r\n\t\t\t\t\treturn plugin.day(plugin._applyMonthsOffset(plugin.add(\r\n\t\t\t\t\t\tplugin.newDate(inst.drawDate), inst.options.monthsToJump, 'm'), inst), 1);\r\n\t\t\t\t},\r\n\t\t\t\taction: function(inst) {\r\n\t\t\t\t\tplugin.changeMonth(this, inst.options.monthsToJump);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcurrent: {text: 'currentText', status: 'currentStatus', // Current month\r\n\t\t\t\tkeystroke: {keyCode: 36, ctrlKey: true}, // Ctrl + Home\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\tvar curDate = inst.selectedDates[0] || plugin.today();\r\n\t\t\t\t\treturn (!minDate || curDate.getTime() >= minDate.getTime()) &&\r\n\t\t\t\t\t\t(!maxDate || curDate.getTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) {\r\n\t\t\t\t\treturn inst.selectedDates[0] || plugin.today();\r\n\t\t\t\t},\r\n\t\t\t\taction: function(inst) {\r\n\t\t\t\t\tvar curDate = inst.selectedDates[0] || plugin.today();\r\n\t\t\t\t\tplugin.showMonth(this, curDate.getFullYear(), curDate.getMonth() + 1);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttoday: {text: 'todayText', status: 'todayStatus', // Today's month\r\n\t\t\t\tkeystroke: {keyCode: 36, ctrlKey: true}, // Ctrl + Home\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\treturn (!minDate || plugin.today().getTime() >= minDate.getTime()) &&\r\n\t\t\t\t\t\t(!maxDate || plugin.today().getTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function() { return plugin.today(); },\r\n\t\t\t\taction: function() { plugin.showMonth(this); }\r\n\t\t\t},\r\n\t\t\tclear: {text: 'clearText', status: 'clearStatus', // Clear the datepicker\r\n\t\t\t\tkeystroke: {keyCode: 35, ctrlKey: true}, // Ctrl + End\r\n\t\t\t\tenabled: function() { return true; },\r\n\t\t\t\tdate: function() { return null; },\r\n\t\t\t\taction: function() { plugin.clear(this); }\r\n\t\t\t},\r\n\t\t\tclose: {text: 'closeText', status: 'closeStatus', // Close the datepicker\r\n\t\t\t\tkeystroke: {keyCode: 27}, // Escape\r\n\t\t\t\tenabled: function() { return true; },\r\n\t\t\t\tdate: function() { return null; },\r\n\t\t\t\taction: function() { plugin.hide(this); }\r\n\t\t\t},\r\n\t\t\tprevWeek: {text: 'prevWeekText', status: 'prevWeekStatus', // Previous week\r\n\t\t\t\tkeystroke: {keyCode: 38, ctrlKey: true}, // Ctrl + Up\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\treturn (!minDate || plugin.add(plugin.newDate(inst.drawDate), -7, 'd').\r\n\t\t\t\t\t\tgetTime() >= minDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) { return plugin.add(plugin.newDate(inst.drawDate), -7, 'd'); },\r\n\t\t\t\taction: function() { plugin.changeDay(this, -7); }\r\n\t\t\t},\r\n\t\t\tprevDay: {text: 'prevDayText', status: 'prevDayStatus', // Previous day\r\n\t\t\t\tkeystroke: {keyCode: 37, ctrlKey: true}, // Ctrl + Left\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar minDate = inst.curMinDate();\r\n\t\t\t\t\treturn (!minDate || plugin.add(plugin.newDate(inst.drawDate), -1, 'd').\r\n\t\t\t\t\t\tgetTime() >= minDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) { return plugin.add(plugin.newDate(inst.drawDate), -1, 'd'); },\r\n\t\t\t\taction: function() { plugin.changeDay(this, -1); }\r\n\t\t\t},\r\n\t\t\tnextDay: {text: 'nextDayText', status: 'nextDayStatus', // Next day\r\n\t\t\t\tkeystroke: {keyCode: 39, ctrlKey: true}, // Ctrl + Right\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\treturn (!maxDate || plugin.add(plugin.newDate(inst.drawDate), 1, 'd').\r\n\t\t\t\t\t\tgetTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) { return plugin.add(plugin.newDate(inst.drawDate), 1, 'd'); },\r\n\t\t\t\taction: function() { plugin.changeDay(this, 1); }\r\n\t\t\t},\r\n\t\t\tnextWeek: {text: 'nextWeekText', status: 'nextWeekStatus', // Next week\r\n\t\t\t\tkeystroke: {keyCode: 40, ctrlKey: true}, // Ctrl + Down\r\n\t\t\t\tenabled: function(inst) {\r\n\t\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\t\treturn (!maxDate || plugin.add(plugin.newDate(inst.drawDate), 7, 'd').\r\n\t\t\t\t\t\tgetTime() <= maxDate.getTime());\r\n\t\t\t\t},\r\n\t\t\t\tdate: function(inst) { return plugin.add(plugin.newDate(inst.drawDate), 7, 'd'); },\r\n\t\t\t\taction: function() { plugin.changeDay(this, 7); }\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Determine whether a {@linkcode module:Datepick~commands|command} is enabled.\r\n\t\t\t@callback DatepickCommandEnabled\r\n\t\t\t@global\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {boolean} <code>true</code> if this command is enabled, <code>false</code> if not.\r\n\t\t\t@example enabled: function(inst) {\r\n  return !!inst.curMinDate();\r\n} */\r\n\r\n\t\t/** Calculate the representative date for a {@linkcode module:Datepick~commands|command}.\r\n\t\t\t@callback DatepickCommandDate\r\n\t\t\t@global\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {Date} A date appropriate for this command.\r\n\t\t\t@example date: function(inst) {\r\n  return inst.curMinDate();\r\n} */\r\n\r\n\t\t/** Perform the action for a {@linkcode module:Datepick~commands|command}.\r\n\t\t\t@callback DatepickCommandAction\r\n\t\t\t@global\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@example action: function(inst) {\r\n  $.datepick.setDate(inst.elem, inst.curMinDate());\r\n} */\r\n\r\n\t\t/** Calculate the week of the year for a date.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|calculateWeek} option.\r\n\t\t\t@callback DatepickCalculateWeek\r\n\t\t\t@global\r\n\t\t\t@param {Date} date The date to evaluate.\r\n\t\t\t@return {number} The week of the year.\r\n\t\t\t@example calculateWeek: function(date) {\r\n  return Math.floor(($.datepick.dayOfYear(date) - 1) / 7) + 1;\r\n} */\r\n\r\n\t\t/** Determine where the first month shows in a multi-month calendar.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|monthsOffset} option.\r\n\t\t\t@callback DatepickMonthsOffset\r\n\t\t\t@global\r\n\t\t\t@param {Date} date The first date to be shown.\r\n\t\t\t@return {number} The offset within the calendar for the first month - first position is 0.\r\n\t\t\t@example monthsToShow: 3,\r\nmonthsToStep: 3,\r\nmonthsOffset: function(date) { // Always start on the quarter\r\n  return date.getMonth() % 3;\r\n} */\r\n\r\n\t\t/** Provide information about an individual date shown in the calendar.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|onDate} option.\r\n\t\t\t@callback DatepickOnDate\r\n\t\t\t@global\r\n\t\t\t@param {Date} date The date to evaluate.\r\n\t\t\t@return {object} Information about that date, with the properties above.\r\n\t\t\t@property selectable {boolean} <code>true</code> if this date can be selected.\r\n\t\t\t@property dateClass {string} Class(es) to be applied to the date.\r\n\t\t\t@property content {string} The date cell content.\r\n\t\t\t@property tooltip {string} A popup tooltip for the date.\r\n\t\t\t@example onDate: function(date) {\r\n  return {selectable: date.getDay() > 0 && date.getDay() &lt; 5,\r\n    dateClass: date.getDay() == 4 ? 'last-day' : ''};\r\n} */\r\n\r\n\t\t/** Update the datepicker display.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|onShow} option.\r\n\t\t\t@callback DatepickOnShow\r\n\t\t\t@global\r\n\t\t\t@param {jQuery} picker The datepicker <code>div</code> to be shown.\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@example onShow: function(picker, inst) {\r\n  picker.append('&lt;button type=\"button\">Hi&lt;/button>').\r\n    find('button:last').click(function() {\r\n      alert('Hi!');\r\n    });\r\n} */\r\n\r\n\t\t/** React to navigating through the months/years.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|onChangeMonthYear} option.\r\n\t\t\t@callback DatepickOnChangeMonthYear\r\n\t\t\t@global\r\n\t\t\t@param {number} year The new year.\r\n\t\t\t@param {number} month The new month (1 to 12).\r\n\t\t\t@example onChangeMonthYear: function(year, month) {\r\n  alert('Now in ' + month + '/' + year);\r\n} */\r\n\r\n\t\t/** Datepicker on select callback.\r\n\t\t\tTriggered when a date is selected.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|onSelect} option.\r\n\t\t\t@callback DatepickOnSelect\r\n\t\t\t@global\r\n\t\t\t@param {Date[]} dates The selected date(s).\r\n\t\t\t@example onSelect: function(dates) {\r\n  alert('Selected ' + dates);\r\n} */\r\n\r\n\t\t/** Datepicker on close callback.\r\n\t\t\tTriggered when a popup calendar is closed.\r\n\t\t\tUse it with the {@linkcode module:Datepick~defaultOptions|onClose} option.\r\n\t\t\t@callback DatepickOnClose\r\n\t\t\t@global\r\n\t\t\t@param {Date[]} dates The selected date(s).\r\n\t\t\t@example onClose: function(dates) {\r\n  alert('Selected ' + dates);\r\n} */\r\n\r\n\t\t/** Default settings for the plugin.\r\n\t\t\t@property {string} [pickerClass=''] CSS class to add to this instance of the datepicker.\r\n\t\t\t@property {boolean} [showOnFocus=true] <code>true</code> for popup on focus, <code>false</code> for not.\r\n\t\t\t@property {string|Element|jQuery} [showTrigger=null] Element to be cloned for a trigger,\r\n\t\t\t\t\t\t<code>null</code> for none.\r\n\t\t\t@property {string} [showAnim='show'] Name of jQuery animation for popup, '' for no animation.\r\n\t\t\t@property {object} [showOptions=null] Options for enhanced animations.\r\n\t\t\t@property {string|number} [showSpeed='normal'] Duration of display/closure, named value or milliseconds.\r\n\t\t\t@property {string|Element|jQuery} [popupContainer=null] The element to which a popup calendar is added,\r\n\t\t\t\t\t\t<code>null</code> for body.\r\n\t\t\t@property {string} [alignment='bottom'] Alignment of popup - with nominated corner of input:\r\n\t\t\t\t\t\t'top' or 'bottom' aligns depending on language direction,\r\n\t\t\t\t\t\t'topLeft', 'topRight', 'bottomLeft', 'bottomRight'.\r\n\t\t\t@property {boolean} [fixedWeeks=false] <code>true</code> to always show 6 weeks,\r\n\t\t\t\t\t\t<code>false</code> to only show as many as are needed.\r\n\t\t\t@property {number} [firstDay=0] First day of the week, 0 = Sunday, 1 = Monday, etc.\r\n\t\t\t@property {DatepickCalculateWeek} [calculateWeek=this.iso8601Week] Calculate week of the year from a date,\r\n\t\t\t\t\t\t<code>null</code> for ISO8601.\r\n\t\t\t@property {number|number[]} [monthsToShow=1] How many months to show, cols or [rows, cols].\r\n\t\t\t@property {number|DatepickMonthsOffset} [monthsOffset=0] How many months to offset the primary month by;\r\n\t\t\t\t\t\tmay be a function that takes the date and returns the offset.\r\n\t\t\t@property {number} [monthsToStep=1] How many months to move when prev/next clicked.\r\n\t\t\t@property {number} [monthsToJump=12] How many months to move when large prev/next clicked.\r\n\t\t\t@property {boolean} [useMouseWheel=true] <code>true</code> to use mousewheel if available,\r\n\t\t\t\t\t\t<code>false</code> to never use it.\r\n\t\t\t@property {boolean} [changeMonth=true] <code>true</code> to change month/year via drop-down,\r\n\t\t\t\t\t\t<code>false</code> for navigation only.\r\n\t\t\t@property {string} [yearRange='c-10:c+10'] Range of years to show in drop-down: 'any' for direct text entry\r\n\t\t\t\t\t\tor 'start:end', where start/end are '±nn' for relative to today\r\n\t\t\t\t\t\tor 'c±nn' for relative to the currently selected date\r\n\t\t\t\t\t\tor 'nnnn' for an absolute year.\r\n\t\t\t@property {string|number} [shortYearCutoff='+10'] Cutoff for two-digit year in the current century.\r\n\t\t\t\t\t\tIf expressed as a string it is offset from the current year.\r\n\t\t\t\t\t\tIf expressed as a number it is used directly.\r\n\t\t\t\t\t\tUse -1 to always use 1900 as the base year, or use 100 to disable the functionality.\r\n\t\t\t\t\t\tAny short year ('yy') entered is transformed into a full year in the current century\r\n\t\t\t\t\t\tif less than or equal to this cutoff value, and the previous century otherwise.\r\n\t\t\t@property {boolean} [showOtherMonths=false] <code>true</code> to show dates from other months,\r\n\t\t\t\t\t\t<code>false</code> to not show them.\r\n\t\t\t@property {boolean} [selectOtherMonths=false] <code>true</code> to allow selection of dates\r\n\t\t\t\t\t\tfrom other months too.\r\n\t\t\t@property {string|number|Date} [defaultDate=null] Date to show if no other selected.\r\n\t\t\t\t\t\tIf expressed as a string it is parsed using the current\r\n\t\t\t\t\t\t{@linkcode module:Datepick~regionalOptions|dateFormat}.\r\n\t\t\t\t\t\tIf expressed as a number it is offset that number of days from today.\r\n\t\t\t\t\t\tIf expressed as a <code>Date</code> it is used directly.\r\n\t\t\t@property {boolean} [selectDefaultDate=false] <code>true</code> to pre-select the default date\r\n\t\t\t\t\t\tif no other is chosen.\r\n\t\t\t@property {string|number|Date} [minDate=null] The minimum selectable date.\r\n\t\t\t\t\t\tSee the allowed values in <code>defaultDate</code> above.\r\n\t\t\t@property {string|number|Date} [maxDate=null] The maximum selectable date.\r\n\t\t\t\t\t\tSee the allowed values in <code>defaultDate</code> above.\r\n\t\t\t@property {string} [dateFormat='mm/dd/yyyy'] Format for dates.\r\n\t\t\t\t\t\tSee {@linkcode module:Datepick~formatDate|formatDate} for allowed formats.\r\n\t\t\t@property {boolean} [autoSize=false] <code>true</code> to size the input field according to\r\n\t\t\t\t\t\tthe {@linkcode module:Datepick~regionalOptions|dateFormat}.\r\n\t\t\t@property {boolean} [rangeSelect=false] Allows for selecting a date range on one date picker.\r\n\t\t\t@property {string} [rangeSeparator=' - '] Text between two dates in a range when displayed.\r\n\t\t\t@property {number} [multiSelect=0] Maximum number of selectable dates for multiple independent dates,\r\n\t\t\t\t\t\tzero for single select. If specified,\r\n\t\t\t\t\t\t<code>multiSelect</code> takes precedence over <code>rangeSelect</code>.\r\n\t\t\t@property {string} [multiSeparator=','] Text between multiple dates.\r\n\t\t\t@property {DatepickOnDate} [onDate=null] Callback as each date is added to the display calendar.\r\n\t\t\t\t\t\tThis allows you to customise the behaviour and presentation of each date.\r\n\t\t\t@property {DatepickOnShow} [onShow=null] Callback just before a datepicker is shown.\r\n\t\t\t\t\t\tThis allows you to customise the datepicker before display.\r\n\t\t\t@property {DatepickOnChangeMonthYear} [onChangeMonthYear=null] Callback when a new month/year is selected.\r\n\t\t\t\t\t\tThis allows you to perform other actions when the calendar changes.\r\n\t\t\t@property {DatepickOnSelect} [onSelect=null] Callback when a date is selected.\r\n\t\t\t@property {DatepickOnClose} [onClose=null] Callback when a datepicker is closed.\r\n\t\t\t@property {string|Element|jQuery} [altField=null] Alternate field to update in synch with the datepicker.\r\n\t\t\t@property {string} [altFormat=null] Date format for alternate field, defaults to\r\n\t\t\t\t\t\t{@linkcode module:Datepick~regionalOptions|dateFormat}.\r\n\t\t\t\t\t\tThis allows you to display one (human-friendly) format,\r\n\t\t\t\t\t\twhile automatically maintaining another (computer-friendly) format.\r\n\t\t\t@property {boolean} [constrainInput=true] <code>true</code> to constrain typed input to\r\n\t\t\t\t\t\t{@linkcode module:Datepick~regionalOptions|dateFormat} allowed characters.\r\n\t\t\t@property {boolean} [commandsAsDateFormat=false] <code>true</code> to apply\r\n\t\t\t\t\t\t{@linkcode module:Datepick~formatDate|formatDate} to the command texts.\r\n\t\t\t@property {object} [commands=this.commands] Command actions that may be added to a layout by name. */\r\n\t\tdefaultOptions: {\r\n\t\t\tpickerClass: '',\r\n\t\t\tshowOnFocus: true,\r\n\t\t\tshowTrigger: null,\r\n\t\t\tshowAnim: 'show',\r\n\t\t\tshowOptions: {},\r\n\t\t\tshowSpeed: 'normal',\r\n\t\t\tpopupContainer: null,\r\n\t\t\talignment: 'bottom',\r\n\t\t\tfixedWeeks: false,\r\n\t\t\tfirstDay: 0,\r\n\t\t\tcalculateWeek: null, // this.iso8601Week,\r\n\t\t\tmonthsToShow: 1,\r\n\t\t\tmonthsOffset: 0,\r\n\t\t\tmonthsToStep: 1,\r\n\t\t\tmonthsToJump: 12,\r\n\t\t\tuseMouseWheel: true,\r\n\t\t\tchangeMonth: true,\r\n\t\t\tyearRange: 'c-10:c+10',\r\n\t\t\tshortYearCutoff: '+10',\r\n\t\t\tshowOtherMonths: false,\r\n\t\t\tselectOtherMonths: false,\r\n\t\t\tdefaultDate: null,\r\n\t\t\tselectDefaultDate: false,\r\n\t\t\tminDate: null,\r\n\t\t\tmaxDate: null,\r\n\t\t\tdateFormat: 'mm/dd/yyyy',\r\n\t\t\tautoSize: false,\r\n\t\t\trangeSelect: false,\r\n\t\t\trangeSeparator: ' - ',\r\n\t\t\tmultiSelect: 0,\r\n\t\t\tmultiSeparator: ',',\r\n\t\t\tonDate: null,\r\n\t\t\tonShow: null,\r\n\t\t\tonChangeMonthYear: null,\r\n\t\t\tonSelect: null,\r\n\t\t\tonClose: null,\r\n\t\t\taltField: null,\r\n\t\t\taltFormat: null,\r\n\t\t\tconstrainInput: true,\r\n\t\t\tcommandsAsDateFormat: false,\r\n\t\t\tcommands: {} // this.commands\r\n\t\t},\r\n\r\n\t\t/** Localisations for the plugin.\r\n\t\t\tEntries are objects indexed by the language code ('' being the default US/English).\r\n\t\t\tEach object has the following attributes.\r\n\t\t\t@property {string[]} [monthNames=['January','February',...,'November','December']]\r\n\t\t\t\t\t\tThe long names of the months.\r\n\t\t\t@property {string[]} [monthNamesShort=['Jan','Feb',...,'Nov','Dec']]\r\n\t\t\t\t\t\tThe short names of the months.\r\n\t\t\t@property {string[]} [dayNames=['Sunday','Monday',...,'Friday','Saturday']]\r\n\t\t\t\t\t\tThe long names of the days of the week.\r\n\t\t\t@property {string[]} [dayNamesShort=['Sun','Mon','Tue','Wed','Thu','Fri','Sat']]\r\n\t\t\t\t\t\tThe short names of the days of the week.\r\n\t\t\t@property {string[]} [dayNamesMin=['Su','Mo','Tu','We','Th','Fr','Sa']]\r\n\t\t\t\t\t\tThe minimal names of the days of the week.\r\n\t\t\t@property {string} [dateFormat='mm/dd/yyyy'] See options on {@linkcode module:Datepick~formatDate|formatDate}.\r\n\t\t\t@property {number} [firstDay=0] The first day of the week, Sun = 0, Mon = 1, etc.\r\n\t\t\t@property {string} [renderer=this.defaultRenderer] The rendering templates.\r\n\t\t\t@property {string} [prevText='&lt;Prev'] Text for the previous month command.\r\n\t\t\t@property {string} [prevStatus='Show the previous month'] Status text for the previous month command.\r\n\t\t\t@property {string} [prevJumpText='&lt;&lt;'] Text for the previous year command.\r\n\t\t\t@property {string} [prevJumpStatus='Show the previous year'] Status text for the previous year command.\r\n\t\t\t@property {string} [nextText='Next&gt;'] Text for the next month command.\r\n\t\t\t@property {string} [nextStatus='Show the next month'] Status text for the next month command.\r\n\t\t\t@property {string} [nextJumpText='&gt;&gt;'] Text for the next year command.\r\n\t\t\t@property {string} [nextJumpStatus='Show the next year'] Status text for the next year command.\r\n\t\t\t@property {string} [currentText='Current'] Text for the current month command.\r\n\t\t\t@property {string} [currentStatus='Show the current month'] Status text for the current month command.\r\n\t\t\t@property {string} [todayText='Today'] Text for the today's month command.\r\n\t\t\t@property {string} [todayStatus='Show today\\'s month'] Status text for the today's month command.\r\n\t\t\t@property {string} [clearText='Clear'] Text for the clear command.\r\n\t\t\t@property {string} [clearStatus='Clear all the dates'] Status text for the clear command.\r\n\t\t\t@property {string} [closeText='Close'] Text for the close command.\r\n\t\t\t@property {string} [closeStatus='Close the datepicker'] Status text for the close command.\r\n\t\t\t@property {string} [yearStatus='Change the year'] Status text for year selection.\r\n\t\t\t@property {string} [earlierText='&#160;&#160;▲'] Text for earlier years.\r\n\t\t\t@property {string} [laterText='&#160;&#160;▼'] Text for later years.\r\n\t\t\t@property {string} [monthStatus='Change the month'] Status text for month selection.\r\n\t\t\t@property {string} [weekText='Wk'] Text for week of the year column header.\r\n\t\t\t@property {string} [weekStatus='Week of the year'] Status text for week of the year column header.\r\n\t\t\t@property {string} [dayStatus='Select DD,&#160;M&#160;d,&#160;yyyy'] Status text for selectable days.\r\n\t\t\t@property {string} [defaultStatus='Select a date'] Status text shown by default.\r\n\t\t\t@property {boolean} [isRTL=false] <code>true</code> if language is written right-to-left. */\r\n\t\tregionalOptions: { // Available regional settings, indexed by language/country code\r\n\t\t\t'': { // Default regional settings - English/US\r\n\t\t\t\tmonthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n\t\t\t\t'July', 'August', 'September', 'October', 'November', 'December'],\r\n\t\t\t\tmonthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n\t\t\t\tdayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n\t\t\t\tdayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n\t\t\t\tdayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n\t\t\t\tdateFormat: 'mm/dd/yyyy',\r\n\t\t\t\tfirstDay: 0,\r\n\t\t\t\trenderer: {}, // this.defaultRenderer\r\n\t\t\t\tprevText: '&lt;Prev',\r\n\t\t\t\tprevStatus: 'Show the previous month',\r\n\t\t\t\tprevJumpText: '&lt;&lt;',\r\n\t\t\t\tprevJumpStatus: 'Show the previous year',\r\n\t\t\t\tnextText: 'Next&gt;',\r\n\t\t\t\tnextStatus: 'Show the next month',\r\n\t\t\t\tnextJumpText: '&gt;&gt;',\r\n\t\t\t\tnextJumpStatus: 'Show the next year',\r\n\t\t\t\tcurrentText: 'Current',\r\n\t\t\t\tcurrentStatus: 'Show the current month',\r\n\t\t\t\ttodayText: 'Today',\r\n\t\t\t\ttodayStatus: 'Show today\\'s month',\r\n\t\t\t\tclearText: 'Clear',\r\n\t\t\t\tclearStatus: 'Clear all the dates',\r\n\t\t\t\tcloseText: 'Close',\r\n\t\t\t\tcloseStatus: 'Close the datepicker',\r\n\t\t\t\tyearStatus: 'Change the year',\r\n\t\t\t\tearlierText: '&#160;&#160;▲',\r\n\t\t\t\tlaterText: '&#160;&#160;▼',\r\n\t\t\t\tmonthStatus: 'Change the month',\r\n\t\t\t\tweekText: 'Wk',\r\n\t\t\t\tweekStatus: 'Week of the year',\r\n\t\t\t\tdayStatus: 'Select DD, M d, yyyy',\r\n\t\t\t\tdefaultStatus: 'Select a date',\r\n\t\t\t\tisRTL: false\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_disabled: [],\r\n\r\n\t\t_popupClass: pluginName + '-popup', // Marker for popup division\r\n\t\t_triggerClass: pluginName + '-trigger', // Marker for trigger element\r\n\t\t_disableClass: pluginName + '-disable', // Marker for disabled element\r\n\t\t_monthYearClass: pluginName + '-month-year', // Marker for month/year inputs\r\n\t\t_curMonthClass: pluginName + '-month-', // Marker for current month/year\r\n\t\t_anyYearClass: pluginName + '-any-year', // Marker for year direct input\r\n\t\t_curDoWClass: pluginName + '-dow-', // Marker for day of week\r\n\r\n\t\t_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +\r\n\t\t\tMath.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),\r\n\t\t_msPerDay: 24 * 60 * 60 * 1000,\r\n\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with Atom (RFC 3339/ISO 8601): yyyy-mm-dd. */\r\n\t\tATOM: 'yyyy-mm-dd',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with cookies: D, dd M yyyy. */\r\n\t\tCOOKIE: 'D, dd M yyyy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for full display: DD, MM d, yyyy. */\r\n\t\tFULL: 'DD, MM d, yyyy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with ISO 8601: yyyy-mm-dd. */\r\n\t\tISO_8601: 'yyyy-mm-dd',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for Julian dates: J. */\r\n\t\tJULIAN: 'J',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RFC 822: D, d M yy. */\r\n\t\tRFC_822: 'D, d M yy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RFC 850: DD, dd-M-yy. */\r\n\t\tRFC_850: 'DD, dd-M-yy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RFC 1036: D, d M yy. */\r\n\t\tRFC_1036: 'D, d M yy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RFC 1123: D, d M yyyy. */\r\n\t\tRFC_1123: 'D, d M yyyy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RFC 2822: D, d M yyyy. */\r\n\t\tRFC_2822: 'D, d M yyyy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with RSS (RFC 822): D, d M yy. */\r\n\t\tRSS: 'D, d M yy',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for Windows ticks: !. */\r\n\t\tTICKS: '!',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for Unix timestamp: @. */\r\n\t\tTIMESTAMP: '@',\r\n\t\t/** The {@linkcode module:Datepick~formatDate|date format} for use with W3C (ISO 8601): yyyy-mm-dd. */\r\n\t\tW3C: 'yyyy-mm-dd',\r\n\r\n\t\t/** Format a date object into a string value.\r\n\t\t\tThe format can be combinations of the following:\r\n\t\t\t<ul>\r\n\t\t\t<li>d  - day of month (no leading zero)</li>\r\n\t\t\t<li>dd - day of month (two digit)</li>\r\n\t\t\t<li>o  - day of year (no leading zeros)</li>\r\n\t\t\t<li>oo - day of year (three digit)</li>\r\n\t\t\t<li>D  - day name short</li>\r\n\t\t\t<li>DD - day name long</li>\r\n\t\t\t<li>w  - week of year (no leading zero)</li>\r\n\t\t\t<li>ww - week of year (two digit)</li>\r\n\t\t\t<li>m  - month of year (no leading zero)</li>\r\n\t\t\t<li>mm - month of year (two digit)</li>\r\n\t\t\t<li>M  - month name short</li>\r\n\t\t\t<li>MM - month name long</li>\r\n\t\t\t<li>yy - year (two digit)</li>\r\n\t\t\t<li>yyyy - year (four digit)</li>\r\n\t\t\t<li>@  - Unix timestamp (s since 01/01/1970)</li>\r\n\t\t\t<li>!  - Windows ticks (100ns since 01/01/0001)</li>\r\n\t\t\t<li>'...' - literal text</li>\r\n\t\t\t<li>'' - single quote</li>\r\n\t\t\t</ul>\r\n\t\t\t@param {string} [format=defaultOptions.dateFormat] The desired format of the date.\r\n\t\t\t@param {Date} date The date value to format.\r\n\t\t\t@param {object} [settings] With these properties:\r\n\t\t\t@param {string[]} [settings.dayNames] Names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.dayNamesShort] Abbreviated names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.monthNames] Names of the months.\r\n\t\t\t@param {string[]} [settings.monthNamesShort] Abbreviated names of the months.\r\n\t\t\t@param {DatepickCalculateWeek} [settings.calculateWeek] Function that determines week of the year.\r\n\t\t\t@return {string} The date in the above format.\r\n\t\t\t@example var display = $.datepick.formatDate('yyyy-mm-dd', new Date(2014, 12-1, 25)) */\r\n\t\tformatDate: function(format, date, settings) {\r\n\t\t\tif (typeof format !== 'string') {\r\n\t\t\t\tsettings = date;\r\n\t\t\t\tdate = format;\r\n\t\t\t\tformat = '';\r\n\t\t\t}\r\n\t\t\tif (!date) {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\tformat = format || this.defaultOptions.dateFormat;\r\n\t\t\tsettings = settings || {};\r\n\t\t\tvar dayNamesShort = settings.dayNamesShort || this.defaultOptions.dayNamesShort;\r\n\t\t\tvar dayNames = settings.dayNames || this.defaultOptions.dayNames;\r\n\t\t\tvar monthNamesShort = settings.monthNamesShort || this.defaultOptions.monthNamesShort;\r\n\t\t\tvar monthNames = settings.monthNames || this.defaultOptions.monthNames;\r\n\t\t\tvar calculateWeek = settings.calculateWeek || this.defaultOptions.calculateWeek;\r\n\t\t\t// Check whether a format character is doubled\r\n\t\t\tvar doubled = function(match, step) {\r\n\t\t\t\tvar matches = 1;\r\n\t\t\t\twhile (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\r\n\t\t\t\t\tmatches++;\r\n\t\t\t\t}\r\n\t\t\t\tiFormat += matches - 1;\r\n\t\t\t\treturn Math.floor(matches / (step || 1)) > 1;\r\n\t\t\t};\r\n\t\t\t// Format a number, with leading zeroes if necessary\r\n\t\t\tvar formatNumber = function(match, value, len, step) {\r\n\t\t\t\tvar num = '' + value;\r\n\t\t\t\tif (doubled(match, step)) {\r\n\t\t\t\t\twhile (num.length < len) {\r\n\t\t\t\t\t\tnum = '0' + num;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn num;\r\n\t\t\t};\r\n\t\t\t// Format a name, short or long as requested\r\n\t\t\tvar formatName = function(match, value, shortNames, longNames) {\r\n\t\t\t\treturn (doubled(match) ? longNames[value] : shortNames[value]);\r\n\t\t\t};\r\n\t\t\tvar output = '';\r\n\t\t\tvar literal = false;\r\n\t\t\tfor (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n\t\t\t\tif (literal) {\r\n\t\t\t\t\tif (format.charAt(iFormat) === '\\'' && !doubled('\\'')) {\r\n\t\t\t\t\t\tliteral = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\toutput += format.charAt(iFormat);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tswitch (format.charAt(iFormat)) {\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\toutput += formatNumber('d', date.getDate(), 2);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'D':\r\n\t\t\t\t\t\t\toutput += formatName('D', date.getDay(), dayNamesShort, dayNames);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'o':\r\n\t\t\t\t\t\t\toutput += formatNumber('o', this.dayOfYear(date), 3);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\toutput += formatNumber('w', calculateWeek(date), 2);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'm':\r\n\t\t\t\t\t\t\toutput += formatNumber('m', date.getMonth() + 1, 2);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'M':\r\n\t\t\t\t\t\t\toutput += formatName('M', date.getMonth(), monthNamesShort, monthNames);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'y':\r\n\t\t\t\t\t\t\toutput += (doubled('y', 2) ? date.getFullYear() :\r\n\t\t\t\t\t\t\t\t(date.getFullYear() % 100 < 10 ? '0' : '') + date.getFullYear() % 100);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '@':\r\n\t\t\t\t\t\t\toutput += Math.floor(date.getTime() / 1000);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '!':\r\n\t\t\t\t\t\t\toutput += date.getTime() * 10000 + this._ticksTo1970;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '\\'':\r\n\t\t\t\t\t\t\tif (doubled('\\'')) {\r\n\t\t\t\t\t\t\t\toutput += '\\'';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tliteral = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\toutput += format.charAt(iFormat);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn output;\r\n\t\t},\r\n\r\n\t\t/** Parse a string value into a date object.\r\n\t\t\tSee {@linkcode module:Datepick~formatDate|formatDate} for the possible formats, plus:\r\n\t\t\t<ul>\r\n\t\t\t<li>* - ignore rest of string</li>\r\n\t\t\t</ul>\r\n\t\t\t@param {string} format The expected format of the date ('' for default datepicker format).\r\n\t\t\t@param {string} value The date in the above format.\r\n\t\t\t@param {object} [settings] With these properties:\r\n\t\t\t@param {number} [settings.shortYearCutoff] The cutoff year for determining the century.\r\n\t\t\t@param {string[]} [settings.dayNames] The names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.dayNamesShort] The abbreviated names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.monthNames] The Names of the months.\r\n\t\t\t@param {string[]} [settings.monthNamesShort] The abbreviated names of the months.\r\n\t\t\t@return {Date} The extracted date value or <code>null</code> if value is blank.\r\n\t\t\t@throws Errors if the format and/or value are missing, if the value doesn't match the format,\r\n\t\t\t\t\tor if the date is invalid.\r\n\t\t\t@example var date = $.datepick.parseDate('dd/mm/yyyy', '25/12/2014') */\r\n\t\tparseDate: function(format, value, settings) {\r\n\t\t\tif (typeof value === 'undefined' || value === null) {\r\n\t\t\t\tthrow 'Invalid arguments';\r\n\t\t\t}\r\n\t\t\tvalue = (typeof value === 'object' ? value.toString() : value + '');\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tformat = format || this.defaultOptions.dateFormat;\r\n\t\t\tsettings = settings || {};\r\n\t\t\tvar shortYearCutoff = settings.shortYearCutoff || this.defaultOptions.shortYearCutoff;\r\n\t\t\tshortYearCutoff = (typeof shortYearCutoff !== 'string' ? shortYearCutoff :\r\n\t\t\t\tthis.today().getFullYear() % 100 + parseInt(shortYearCutoff, 10));\r\n\t\t\tvar dayNamesShort = settings.dayNamesShort || this.defaultOptions.dayNamesShort;\r\n\t\t\tvar dayNames = settings.dayNames || this.defaultOptions.dayNames;\r\n\t\t\tvar monthNamesShort = settings.monthNamesShort || this.defaultOptions.monthNamesShort;\r\n\t\t\tvar monthNames = settings.monthNames || this.defaultOptions.monthNames;\r\n\t\t\tvar year = -1;\r\n\t\t\tvar month = -1;\r\n\t\t\tvar day = -1;\r\n\t\t\tvar doy = -1;\r\n\t\t\tvar shortYear = false;\r\n\t\t\tvar literal = false;\r\n\t\t\tvar date = null;\r\n\t\t\t// Check whether a format character is doubled\r\n\t\t\tvar doubled = function(match, step) {\r\n\t\t\t\tvar matches = 1;\r\n\t\t\t\twhile (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\r\n\t\t\t\t\tmatches++;\r\n\t\t\t\t}\r\n\t\t\t\tiFormat += matches - 1;\r\n\t\t\t\treturn Math.floor(matches / (step || 1)) > 1;\r\n\t\t\t};\r\n\t\t\t// Extract a number from the string value\r\n\t\t\tvar getNumber = function(match, step) {\r\n\t\t\t\tvar isDoubled = doubled(match, step);\r\n\t\t\t\tvar size = [2, 3, isDoubled ? 4 : 2, 11, 20]['oy@!'.indexOf(match) + 1];\r\n\t\t\t\tvar digits = new RegExp('^-?\\\\d{1,' + size + '}');\r\n\t\t\t\tvar num = value.substring(iValue).match(digits);\r\n\t\t\t\tif (!num) {\r\n\t\t\t\t\tthrow 'Missing number at position {0}'.replace(/\\{0\\}/, iValue);\r\n\t\t\t\t}\r\n\t\t\t\tiValue += num[0].length;\r\n\t\t\t\treturn parseInt(num[0], 10);\r\n\t\t\t};\r\n\t\t\t// Extract a name from the string value and convert to an index\r\n\t\t\tvar getName = function(match, shortNames, longNames, step) {\r\n\t\t\t\tvar names = (doubled(match, step) ? longNames : shortNames);\r\n\t\t\t\tfor (var i = 0; i < names.length; i++) {\r\n\t\t\t\t\tif (value.substr(iValue, names[i].length).toLowerCase() === names[i].toLowerCase()) {\r\n\t\t\t\t\t\tiValue += names[i].length;\r\n\t\t\t\t\t\treturn i + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthrow 'Unknown name at position {0}'.replace(/\\{0\\}/, iValue);\r\n\t\t\t};\r\n\t\t\t// Confirm that a literal character matches the string value\r\n\t\t\tvar checkLiteral = function() {\r\n\t\t\t\tif (value.charAt(iValue) !== format.charAt(iFormat)) {\r\n\t\t\t\t\tthrow 'Unexpected literal at position {0}'.replace(/\\{0\\}/, iValue);\r\n\t\t\t\t}\r\n\t\t\t\tiValue++;\r\n\t\t\t};\r\n\t\t\tvar iValue = 0;\r\n\t\t\tfor (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n\t\t\t\tif (literal) {\r\n\t\t\t\t\tif (format.charAt(iFormat) === '\\'' && !doubled('\\'')) {\r\n\t\t\t\t\t\tliteral = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcheckLiteral();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tswitch (format.charAt(iFormat)) {\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\tday = getNumber('d');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'D':\r\n\t\t\t\t\t\t\tgetName('D', dayNamesShort, dayNames);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'o':\r\n\t\t\t\t\t\t\tdoy = getNumber('o');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\tgetNumber('w');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'm':\r\n\t\t\t\t\t\t\tmonth = getNumber('m');\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'M':\r\n\t\t\t\t\t\t\tmonth = getName('M', monthNamesShort, monthNames);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'y':\r\n\t\t\t\t\t\t\tvar iSave = iFormat;\r\n\t\t\t\t\t\t\tshortYear = !doubled('y', 2);\r\n\t\t\t\t\t\t\tiFormat = iSave;\r\n\t\t\t\t\t\t\tyear = getNumber('y', 2);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '@':\r\n\t\t\t\t\t\t\tdate = this._normaliseDate(new Date(getNumber('@') * 1000));\r\n\t\t\t\t\t\t\tyear = date.getFullYear();\r\n\t\t\t\t\t\t\tmonth = date.getMonth() + 1;\r\n\t\t\t\t\t\t\tday = date.getDate();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '!':\r\n\t\t\t\t\t\t\tdate = this._normaliseDate(\r\n\t\t\t\t\t\t\t\tnew Date((getNumber('!') - this._ticksTo1970) / 10000));\r\n\t\t\t\t\t\t\tyear = date.getFullYear();\r\n\t\t\t\t\t\t\tmonth = date.getMonth() + 1;\r\n\t\t\t\t\t\t\tday = date.getDate();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '*':\r\n\t\t\t\t\t\t\tiValue = value.length;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase '\\'':\r\n\t\t\t\t\t\t\tif (doubled('\\'')) {\r\n\t\t\t\t\t\t\t\tcheckLiteral();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tliteral = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tcheckLiteral();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (iValue < value.length) {\r\n\t\t\t\tthrow 'Additional text found at end';\r\n\t\t\t}\r\n\t\t\tif (year === -1) {\r\n\t\t\t\tyear = this.today().getFullYear();\r\n\t\t\t}\r\n\t\t\telse if (year < 100 && shortYear) {\r\n\t\t\t\tyear += (shortYearCutoff === -1 ? 1900 : this.today().getFullYear() -\r\n\t\t\t\t\tthis.today().getFullYear() % 100 - (year <= shortYearCutoff ? 0 : 100));\r\n\t\t\t}\r\n\t\t\tif (doy > -1) {\r\n\t\t\t\tmonth = 1;\r\n\t\t\t\tday = doy;\r\n\t\t\t\tfor (var dim = this.daysInMonth(year, month); day > dim;\r\n\t\t\t\t\t\tdim = this.daysInMonth(year, month)) {\r\n\t\t\t\t\tmonth++;\r\n\t\t\t\t\tday -= dim;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdate = this.newDate(year, month, day);\r\n\t\t\tif (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\r\n\t\t\t\tthrow 'Invalid date';\r\n\t\t\t}\r\n\t\t\treturn date;\r\n\t\t},\r\n\r\n\t\t/** A date may be specified as an exact value or a relative one.\r\n\t\t\t@param {Date|number|string} dateSpec The date as a <code>Date</code>,\r\n\t\t\t\t\tor as a string in the current {@linkcode module:Datepick~regionalOptions|dateFormat},\r\n\t\t\t\t\tor as a numeric offset - in days from today,\r\n\t\t\t\t\tor as a string of amounts and periods, e.g. '+1m +2w',\r\n\t\t\t\t\tusing 'd' for days, 'w' for weeks, 'm' for months, and 'y' for years.\r\n\t\t\t@param {Date} [defaultDate] The date to use if no other supplied, may be <code>null</code>.\r\n\t\t\t@param {Date} [currentDate] The current date as a possible basis for relative dates,\r\n\t\t\t\t\tif <code>null</code> today is used.\r\n\t\t\t@param {string} [dateFormat] The expected date format - see {@linkcode module:Datepick~formatDate|formatDate}.\r\n\t\t\t@param {object} [settings] With these properties:\r\n\t\t\t@param {number} [settings.shortYearCutoff] The cutoff year for determining the century.\r\n\t\t\t@param {string[]} [settings.dayNamesShort] Abbreviated names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.dayNames] Names of the days from Sunday.\r\n\t\t\t@param {string[]} [settings.monthNamesShort] Abbreviated names of the months.\r\n\t\t\t@param {string[]} [settings.monthNames] Names of the months.\r\n\t\t\t@return {Date} The decoded date.\r\n\t\t\t@example var date = $.datepick.determineDate('+1m +2w', new Date()) */\r\n\t\tdetermineDate: function(dateSpec, defaultDate, currentDate, dateFormat, settings) {\r\n\t\t\tif (currentDate && typeof currentDate !== 'object') {\r\n\t\t\t\tsettings = dateFormat;\r\n\t\t\t\tdateFormat = currentDate;\r\n\t\t\t\tcurrentDate = null;\r\n\t\t\t}\r\n\t\t\tif (typeof dateFormat !== 'string') {\r\n\t\t\t\tsettings = dateFormat;\r\n\t\t\t\tdateFormat = '';\r\n\t\t\t}\r\n\t\t\tvar offsetString = function(offset) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn plugin.parseDate(dateFormat, offset, settings);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t}\r\n\t\t\t\toffset = offset.toLowerCase();\r\n\t\t\t\tvar date = (offset.match(/^c/) && currentDate ? plugin.newDate(currentDate) : null) ||\r\n\t\t\t\t\tplugin.today();\r\n\t\t\t\tvar pattern = /([+-]?[0-9]+)\\s*(d|w|m|y)?/g;\r\n\t\t\t\tvar matches = null;\r\n\t\t\t\twhile ((matches = pattern.exec(offset))) {\r\n\t\t\t\t\tdate = plugin.add(date, parseInt(matches[1], 10), matches[2] || 'd');\r\n\t\t\t\t}\r\n\t\t\t\treturn date;\r\n\t\t\t};\r\n\t\t\tdefaultDate = (defaultDate ? plugin.newDate(defaultDate) : null);\r\n\t\t\tdateSpec = (typeof dateSpec === 'undefined' ? defaultDate :\r\n\t\t\t\t(typeof dateSpec === 'string' ? offsetString(dateSpec) : (typeof dateSpec === 'number' ?\r\n\t\t\t\t(isNaN(dateSpec) || dateSpec === Infinity || dateSpec === -Infinity ? defaultDate :\r\n\t\t\t\tplugin.add(plugin.today(), dateSpec, 'd')) : plugin.newDate(dateSpec))));\r\n\t\t\treturn dateSpec;\r\n\t\t},\r\n\r\n\t\t/** Find the number of days in a given month.\r\n\t\t\t@param {Date|number} year The date to get days for or the full year.\r\n\t\t\t@param {number} [month] The month (1 to 12), if the year is a number.\r\n\t\t\t@return {number} The number of days in this month.\r\n\t\t\t@example var days = $.datepick.daysInMonth(2014, 12)\r\nvar days = $.datepick.daysInMonth(new Date(2014, 12-1, 25)) */\r\n\t\tdaysInMonth: function(year, month) {\r\n\t\t\tmonth = (year.getFullYear ? year.getMonth() + 1 : month);\r\n\t\t\tyear = (year.getFullYear ? year.getFullYear() : year);\r\n\t\t\treturn this.newDate(year, month + 1, 0).getDate();\r\n\t\t},\r\n\r\n\t\t/** Calculate the day of the year for a date.\r\n\t\t\t@param {Date|number} year The date to get the day-of-year for or the full year.\r\n\t\t\t@param {number} [month] The month (1-12), if the year is a number.\r\n\t\t\t@param {number} [day] The day, if the year is a number.\r\n\t\t\t@return {number} The day of the year.\r\n\t\t\t@example var doy = $.datepick.dayOfYear(2014, 12, 25)\r\nvar doy = $.datepick.dayOfYear(new Date(2014, 12-1, 25)) */\r\n\t\tdayOfYear: function(year, month, day) {\r\n\t\t\tvar date = (year.getFullYear ? year : plugin.newDate(year, month, day));\r\n\t\t\tvar newYear = plugin.newDate(date.getFullYear(), 1, 1);\r\n\t\t\treturn Math.floor((date.getTime() - newYear.getTime()) / plugin._msPerDay) + 1;\r\n\t\t},\r\n\r\n\t\t/** Set as <code>calculateWeek</code> to determine the week of the year based on the ISO 8601 definition.\r\n\t\t\t@param {Date|number} year The date to get the week for or the full year.\r\n\t\t\t@param {number} [month] The month (1-12), if the year is a number.\r\n\t\t\t@param {number} [day] The day, if the year is a number.\r\n\t\t\t@return {number} The number of the week within the year that contains this date.\r\n\t\t\t@example var week = $.datepick.iso8601Week(2014, 12, 25)\r\nvar week = $.datepick.iso8601Week(new Date(2014, 12-1, 25)) */\r\n\t\tiso8601Week: function(year, month, day) {\r\n\t\t\tvar checkDate = (year.getFullYear ?\r\n\t\t\t\tnew Date(year.getTime()) : plugin.newDate(year, month, day));\r\n\t\t\t// Find Thursday of this week starting on Monday\r\n\t\t\tcheckDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\r\n\t\t\tvar time = checkDate.getTime();\r\n\t\t\tcheckDate.setMonth(0, 1); // Compare with Jan 1\r\n\t\t\treturn Math.floor(Math.round((time - checkDate) / plugin._msPerDay) / 7) + 1;\r\n\t\t},\r\n\r\n\t\t/** Return today's date.\r\n\t\t\t@return {Date} Today.\r\n\t\t\t@example var today = $.datepick.today() */\r\n\t\ttoday: function() {\r\n\t\t\treturn this._normaliseDate(new Date());\r\n\t\t},\r\n\r\n\t\t/** Return a new date.\r\n\t\t\t@param {Date|number} year The date to clone or the year.\r\n\t\t\t@param {number} [month] The month (1-12), if the year is a number.\r\n\t\t\t@param {number} [day] The day, if the year is a number.\r\n\t\t\t@return {Date} The date.\r\n\t\t\t@example $.datepick.newDate(oldDate)\r\n$.datepick.newDate(2014, 12, 25) */\r\n\t\tnewDate: function(year, month, day) {\r\n\t\t\treturn (!year ? null : (year.getFullYear ? this._normaliseDate(new Date(year.getTime())) :\r\n\t\t\t\tnew Date(year, month - 1, day, 12)));\r\n\t\t},\r\n\r\n\t\t/** Standardise a date into a common format - time portion is 12 noon.\r\n\t\t\t@private\r\n\t\t\t@param {Date} date The date to standardise.\r\n\t\t\t@return {Date} The normalised date. */\r\n\t\t_normaliseDate: function(date) {\r\n\t\t\tif (date) {\r\n\t\t\t\tdate.setHours(12, 0, 0, 0);\r\n\t\t\t}\r\n\t\t\treturn date;\r\n\t\t},\r\n\r\n\t\t/** Set the year for a date.\r\n\t\t\t@param {Date} date The original date.\r\n\t\t\t@param {number} year The new year.\r\n\t\t\t@return {Date} The updated date.\r\n\t\t\t@example $.datepick.year(date, 2014) */\r\n\t\tyear: function(date, year) {\r\n\t\t\tdate.setFullYear(year);\r\n\t\t\treturn this._normaliseDate(date);\r\n\t\t},\r\n\r\n\t\t/** Set the month for a date.\r\n\t\t\t@param {Date} date The original date.\r\n\t\t\t@param {number} month The new month (1-12).\r\n\t\t\t@return {Date} The updated date.\r\n\t\t\t@example $.datepick.month(date, 12) */\r\n\t\tmonth: function(date, month) {\r\n\t\t\tdate.setMonth(month - 1);\r\n\t\t\treturn this._normaliseDate(date);\r\n\t\t},\r\n\r\n\t\t/** Set the day for a date.\r\n\t\t\t@param {Date} date The original date.\r\n\t\t\t@param {number} day The new day of the month.\r\n\t\t\t@return {Date} The updated date.\r\n\t\t\t@example $.datepick.day(date, 25) */\r\n\t\tday: function(date, day) {\r\n\t\t\tdate.setDate(day);\r\n\t\t\treturn this._normaliseDate(date);\r\n\t\t},\r\n\r\n\t\t/** Add a number of periods to a date.\r\n\t\t\t@param {Date} date The original date.\r\n\t\t\t@param {number} amount The number of periods.\r\n\t\t\t@param {string} period The type of period 'd' for days, 'w' for weeks, 'm' for months, 'y' for years.\r\n\t\t\t@return {Date} The updated date.\r\n\t\t\t@example $.datepick.add(date, 10, 'd') */\r\n\t\tadd: function(date, amount, period) {\r\n\t\t\tif (period === 'd' || period === 'w') {\r\n\t\t\t\tthis._normaliseDate(date);\r\n\t\t\t\tdate.setDate(date.getDate() + amount * (period === 'w' ? 7 : 1));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar year = date.getFullYear() + (period === 'y' ? amount : 0);\r\n\t\t\t\tvar month = date.getMonth() + (period === 'm' ? amount : 0);\r\n\t\t\t\tdate.setTime(plugin.newDate(year, month + 1,\r\n\t\t\t\t\tMath.min(date.getDate(), this.daysInMonth(year, month + 1))).getTime());\r\n\t\t\t}\r\n\t\t\treturn date;\r\n\t\t},\r\n\r\n\t\t/** Apply the months offset value to a date.\r\n\t\t\t@private\r\n\t\t\t@param {Date} date The original date.\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {Date} The updated date. */\r\n\t\t_applyMonthsOffset: function(date, inst) {\r\n\t\t\tvar monthsOffset = inst.options.monthsOffset;\r\n\t\t\tif ($.isFunction(monthsOffset)) {\r\n\t\t\t\tmonthsOffset = monthsOffset.apply(inst.elem[0], [date]);\r\n\t\t\t}\r\n\t\t\treturn plugin.add(date, -monthsOffset, 'm');\r\n\t\t},\r\n\r\n\t\t_init: function() {\r\n\t\t\tthis.defaultOptions.commands = this.commands;\r\n\t\t\tthis.defaultOptions.calculateWeek = this.iso8601Week;\r\n\t\t\tthis.regionalOptions[''].renderer = this.defaultRenderer;\r\n\t\t\tthis._super();\r\n\t\t},\r\n\r\n\t\t_instSettings: function(elem) {\r\n\t\t\treturn {selectedDates: [], drawDate: null, pickingRange: false,\r\n\t\t\t\tinline: ($.inArray(elem[0].nodeName.toLowerCase(), ['div', 'span']) > -1),\r\n\t\t\t\tget: function(name) { // Get a setting value, computing if necessary\r\n\t\t\t\t\tif ($.inArray(name, ['defaultDate', 'minDate', 'maxDate']) > -1) { // Decode date settings\r\n\t\t\t\t\t\treturn plugin.determineDate(this.options[name], null,\r\n\t\t\t\t\t\t\tthis.selectedDates[0], this.options.dateFormat, this.getConfig());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.options[name];\r\n\t\t\t\t},\r\n\t\t\t\tcurMinDate: function() {\r\n\t\t\t\t\treturn (this.pickingRange ? this.selectedDates[0] : this.get('minDate'));\r\n\t\t\t\t},\r\n\t\t\t\tgetConfig: function() {\r\n\t\t\t\t\treturn {dayNamesShort: this.options.dayNamesShort, dayNames: this.options.dayNames,\r\n\t\t\t\t\t\tmonthNamesShort: this.options.monthNamesShort, monthNames: this.options.monthNames,\r\n\t\t\t\t\t\tcalculateWeek: this.options.calculateWeek,\r\n\t\t\t\t\t\tshortYearCutoff: this.options.shortYearCutoff};\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t_postAttach: function(elem, inst) {\r\n\t\t\tif (inst.inline) {\r\n\t\t\t\tinst.drawDate = plugin._checkMinMax(plugin.newDate(inst.selectedDates[0] ||\r\n\t\t\t\t\tinst.get('defaultDate') || plugin.today()), inst);\r\n\t\t\t\tinst.prevDate = plugin.newDate(inst.drawDate);\r\n\t\t\t\tthis._update(elem[0]);\r\n\t\t\t\tif ($.fn.mousewheel) {\r\n\t\t\t\t\telem.mousewheel(this._doMouseWheel);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._attachments(elem, inst);\r\n\t\t\t\telem.on('keydown.' + inst.name, this._keyDown).on('keypress.' + inst.name, this._keyPress).\r\n\t\t\t\t\ton('keyup.' + inst.name, this._keyUp);\r\n\t\t\t\tif (elem.attr('disabled')) {\r\n\t\t\t\t\tthis.disable(elem[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_optionsChanged: function(elem, inst, options) {\r\n\t\t\tif (options.calendar && options.calendar !== inst.options.calendar) {\r\n\t\t\t\tvar discardDate = function(name) {\r\n\t\t\t\t\treturn (typeof inst.options[name] === 'object' ? null : inst.options[name]);\r\n\t\t\t\t};\r\n\t\t\t\toptions = $.extend({defaultDate: discardDate('defaultDate'),\r\n\t\t\t\t\tminDate: discardDate('minDate'), maxDate: discardDate('maxDate')}, options);\r\n\t\t\t\tinst.selectedDates = [];\r\n\t\t\t\tinst.drawDate = null;\r\n\t\t\t}\r\n\t\t\tvar dates = inst.selectedDates;\r\n\t\t\t$.extend(inst.options, options);\r\n\t\t\tthis.setDate(elem[0], dates, null, false, true);\r\n\t\t\tinst.pickingRange = false;\r\n\t\t\tinst.drawDate = plugin.newDate(this._checkMinMax(\r\n\t\t\t\t(inst.options.defaultDate ? inst.get('defaultDate') : inst.drawDate) ||\r\n\t\t\t\tinst.get('defaultDate') || plugin.today(), inst));\r\n\t\t\tif (!inst.inline) {\r\n\t\t\t\tthis._attachments(elem, inst);\r\n\t\t\t}\r\n\t\t\tif (inst.inline || inst.div) {\r\n\t\t\t\tthis._update(elem[0]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Attach events and trigger, if necessary.\r\n\t\t\t@private\r\n\t\t\t@param {jQuery} elem The control to affect.\r\n\t\t\t@param {object} inst The current instance settings. */\r\n\t\t_attachments: function(elem, inst) {\r\n\t\t\telem.off('focus.' + inst.name);\r\n\t\t\tif (inst.options.showOnFocus) {\r\n\t\t\t\telem.on('focus.' + inst.name, this.show);\r\n\t\t\t}\r\n\t\t\tif (inst.trigger) {\r\n\t\t\t\tinst.trigger.remove();\r\n\t\t\t}\r\n\t\t\tvar trigger = inst.options.showTrigger;\r\n\t\t\tinst.trigger = (!trigger ? $([]) :\r\n\t\t\t\t$(trigger).clone().removeAttr('id').addClass(this._triggerClass)\r\n\t\t\t\t\t[inst.options.isRTL ? 'insertBefore' : 'insertAfter'](elem).\r\n\t\t\t\t\tclick(function() {\r\n\t\t\t\t\t\tif (!plugin.isDisabled(elem[0])) {\r\n\t\t\t\t\t\t\tplugin[plugin.curInst === inst ? 'hide' : 'show'](elem[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}));\r\n\t\t\tthis._autoSize(elem, inst);\r\n\t\t\tvar dates = this._extractDates(inst, elem.val());\r\n\t\t\tif (dates) {\r\n\t\t\t\tthis.setDate(elem[0], dates, null, true);\r\n\t\t\t}\r\n\t\t\tvar defaultDate = inst.get('defaultDate');\r\n\t\t\tif (inst.options.selectDefaultDate && defaultDate && inst.selectedDates.length === 0) {\r\n\t\t\t\tthis.setDate(elem[0], plugin.newDate(defaultDate || plugin.today()));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Apply the maximum length for the date format.\r\n\t\t\t@private\r\n\t\t\t@param {jQuery} elem The control to affect.\r\n\t\t\t@param {object} inst The current instance settings. */\r\n\t\t_autoSize: function(elem, inst) {\r\n\t\t\tif (inst.options.autoSize && !inst.inline) {\r\n\t\t\t\tvar date = plugin.newDate(2009, 10, 20); // Ensure double digits\r\n\t\t\t\tvar dateFormat = inst.options.dateFormat;\r\n\t\t\t\tif (dateFormat.match(/[DM]/)) {\r\n\t\t\t\t\tvar findMax = function(names) {\r\n\t\t\t\t\t\tvar max = 0;\r\n\t\t\t\t\t\tvar maxI = 0;\r\n\t\t\t\t\t\tfor (var i = 0; i < names.length; i++) {\r\n\t\t\t\t\t\t\tif (names[i].length > max) {\r\n\t\t\t\t\t\t\t\tmax = names[i].length;\r\n\t\t\t\t\t\t\t\tmaxI = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn maxI;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tdate.setMonth(findMax(inst.options[dateFormat.match(/MM/) ? // Longest month\r\n\t\t\t\t\t\t'monthNames' : 'monthNamesShort']));\r\n\t\t\t\t\tdate.setDate(findMax(inst.options[dateFormat.match(/DD/) ? // Longest day\r\n\t\t\t\t\t\t'dayNames' : 'dayNamesShort']) + 20 - date.getDay());\r\n\t\t\t\t}\r\n\t\t\t\tinst.elem.attr('size', plugin.formatDate(dateFormat, date, inst.getConfig()).length);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_preDestroy: function(elem, inst) {\r\n\t\t\tif (inst.trigger) {\r\n\t\t\t\tinst.trigger.remove();\r\n\t\t\t}\r\n\t\t\telem.empty().off('.' + inst.name);\r\n\t\t\tif (inst.inline && $.fn.mousewheel) {\r\n\t\t\t\telem.unmousewheel();\r\n\t\t\t}\r\n\t\t\tif (!inst.inline && inst.options.autoSize) {\r\n\t\t\t\telem.removeAttr('size');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Apply multiple event functions.\r\n\t\t\t@param {function} fns The functions to apply.\r\n\t\t\t@example onShow: $.datepick.multipleEvents(fn1, fn2, ...) */\r\n\t\tmultipleEvents: function(...funcs) {\r\n      console.log(arguments);\r\n      //var funcs = arguments;\r\n      console.log(funcs);\r\n\t\t\treturn function() {\r\n\t\t\t\tfor (var i = 0; i < funcs.length; i++) {\r\n\t\t\t\t\tfuncs[i].apply(this, funcs);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/** Enable the control.\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@example $(selector).datepick('enable') */\r\n\t\tenable: function(elem) {\r\n\t\t\telem = $(elem);\r\n\t\t\tif (!elem.hasClass(this._getMarker())) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (inst.inline) {\r\n\t\t\t\telem.children('.' + this._disableClass).remove().end().\r\n\t\t\t\t\tfind('button,select').prop('disabled', false).end().\r\n\t\t\t\t\tfind('a').attr('href', '#');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telem.prop('disabled', false);\r\n\t\t\t\tinst.trigger.filter('button.' + this._triggerClass).prop('disabled', false).end().\r\n\t\t\t\t\tfilter('img.' + this._triggerClass).css({opacity: '1.0', cursor: ''});\r\n\t\t\t}\r\n\t\t\tthis._disabled = $.map(this._disabled,\r\n\t\t\t\tfunction(value) { return (value === elem[0] ? null : value); }); // Delete entry\r\n\t\t},\r\n\r\n\t\t/** Disable the control.\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@example $(selector).datepick('disable') */\r\n\t\tdisable: function(elem) {\r\n\t\t\telem = $(elem);\r\n\t\t\tif (!elem.hasClass(this._getMarker())) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (inst.inline) {\r\n\t\t\t\tvar inline = elem.children(':last');\r\n\t\t\t\tvar offset = inline.offset();\r\n\t\t\t\tvar relOffset = {left: 0, top: 0};\r\n\t\t\t\tinline.parents().each(function() {\r\n\t\t\t\t\tif ($(this).css('position') === 'relative') {\r\n\t\t\t\t\t\trelOffset = $(this).offset();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar zIndex = elem.css('zIndex');\r\n\t\t\t\tzIndex = (zIndex === 'auto' ? 0 : parseInt(zIndex, 10)) + 1;\r\n\t\t\t\telem.prepend('<div class=\"' + this._disableClass + '\" style=\"' +\r\n\t\t\t\t\t'width: ' + inline.outerWidth() + 'px; height: ' + inline.outerHeight() +\r\n\t\t\t\t\t'px; left: ' + (offset.left - relOffset.left) + 'px; top: ' +\r\n\t\t\t\t\t(offset.top - relOffset.top) + 'px; z-index: ' + zIndex + '\"></div>').\r\n\t\t\t\t\tfind('button,select').prop('disabled', true).end().\r\n\t\t\t\t\tfind('a').removeAttr('href');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telem.prop('disabled', true);\r\n\t\t\t\tinst.trigger.filter('button.' + this._triggerClass).prop('disabled', true).end().\r\n\t\t\t\t\tfilter('img.' + this._triggerClass).css({opacity: '0.5', cursor: 'default'});\r\n\t\t\t}\r\n\t\t\tthis._disabled = $.map(this._disabled,\r\n\t\t\t\tfunction(value) { return (value === elem[0] ? null : value); }); // Delete entry\r\n\t\t\tthis._disabled.push(elem[0]);\r\n\t\t},\r\n\r\n\t\t/** Is the first field in a jQuery collection disabled as a datepicker?\r\n\t\t\t@param {Element} elem The control to examine.\r\n\t\t\t@return {boolean} <code>true</code> if disabled, <code>false</code> if enabled.\r\n\t\t\t@example if ($(selector).datepick('isDisabled')) {...} */\r\n\t\tisDisabled: function(elem) {\r\n\t\t\treturn (elem && $.inArray(elem, this._disabled) > -1);\r\n\t\t},\r\n\r\n\t\t/** Show a popup datepicker.\r\n\t\t\t@param {Element|Event} elem The control to use or a focus event (internal).\r\n\t\t\t@example $(selector).datepick('show') */\r\n\t\tshow: function(elem) {\r\n\t\t\telem = $(elem.target || elem);\r\n\t\t\tvar inst = plugin._getInst(elem);\r\n\t\t\tif (plugin.curInst === inst) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (plugin.curInst) {\r\n\t\t\t\tplugin.hide(plugin.curInst, true);\r\n\t\t\t}\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\t// Retrieve existing date(s)\r\n\t\t\t\tinst.lastVal = null;\r\n\t\t\t\tinst.selectedDates = plugin._extractDates(inst, elem.val());\r\n\t\t\t\tinst.pickingRange = false;\r\n\t\t\t\tinst.drawDate = plugin._checkMinMax(plugin.newDate(inst.selectedDates[0] ||\r\n\t\t\t\t\tinst.get('defaultDate') || plugin.today()), inst);\r\n\t\t\t\tinst.prevDate = plugin.newDate(inst.drawDate);\r\n\t\t\t\tplugin.curInst = inst;\r\n\t\t\t\t// Generate content\r\n\t\t\t\tplugin._update(elem[0], true);\r\n\t\t\t\t// Adjust position before showing\r\n\t\t\t\tvar offset = plugin._checkOffset(inst);\r\n\t\t\t\tinst.div.css({left: offset.left, top: offset.top});\r\n\t\t\t\t// And display\r\n\t\t\t\tvar showAnim = inst.options.showAnim;\r\n\t\t\t\tvar showSpeed = inst.options.showSpeed;\r\n\t\t\t\tshowSpeed = (showSpeed === 'normal' && $.ui &&\r\n\t\t\t\t\tparseInt($.ui.version.substring(2)) >= 8 ? '_default' : showSpeed);\r\n\t\t\t\tif ($.effects && ($.effects[showAnim] || ($.effects.effect && $.effects.effect[showAnim]))) {\r\n\t\t\t\t\tvar data = inst.div.data(); // Update old effects data\r\n\t\t\t\t\tfor (var key in data) {\r\n\t\t\t\t\t\tif (key.match(/^ec\\.storage\\./)) {\r\n\t\t\t\t\t\t\tdata[key] = inst._mainDiv.css(key.replace(/ec\\.storage\\./, ''));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinst.div.data(data).show(showAnim, inst.options.showOptions, showSpeed);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinst.div[showAnim || 'show'](showAnim ? showSpeed : 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Extract possible dates from a string.\r\n\t\t\t@private\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@param {string} text The text to extract from.\r\n\t\t\t@return {Date[]} The extracted dates. */\r\n\t\t_extractDates: function(inst, datesText) {\r\n\t\t\tif (datesText === inst.lastVal) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tinst.lastVal = datesText;\r\n\t\t\tdatesText = datesText.split(inst.options.multiSelect ? inst.options.multiSeparator :\r\n\t\t\t\t(inst.options.rangeSelect ? inst.options.rangeSeparator : '\\x00'));\r\n\t\t\tvar dates = [];\r\n\t\t\tfor (var i = 0; i < datesText.length; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar date = plugin.parseDate(inst.options.dateFormat, datesText[i], inst.getConfig());\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\tfor (var j = 0; j < dates.length; j++) {\r\n\t\t\t\t\t\t\tif (dates[j].getTime() === date.getTime()) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!found) {\r\n\t\t\t\t\t\t\tdates.push(date);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdates.splice(inst.options.multiSelect || (inst.options.rangeSelect ? 2 : 1), dates.length);\r\n\t\t\tif (inst.options.rangeSelect && dates.length === 1) {\r\n\t\t\t\tdates[1] = dates[0];\r\n\t\t\t}\r\n\t\t\treturn dates;\r\n\t\t},\r\n\r\n\t\t/** Update the datepicker display.\r\n\t\t\t@private\r\n\t\t\t@param {Event|Element} elem A focus event or the control to use.\r\n\t\t\t@param {boolean} hidden <code>true</code> to initially hide the datepicker. */\r\n\t\t_update: function(elem, hidden) {\r\n\t\t\telem = $(elem.target || elem);\r\n\t\t\tvar inst = plugin._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tif (inst.inline || plugin.curInst === inst) {\r\n\t\t\t\t\tif ($.isFunction(inst.options.onChangeMonthYear) && (!inst.prevDate ||\r\n\t\t\t\t\t\t\tinst.prevDate.getFullYear() !== inst.drawDate.getFullYear() ||\r\n\t\t\t\t\t\t\tinst.prevDate.getMonth() !== inst.drawDate.getMonth())) {\r\n\t\t\t\t\t\tinst.options.onChangeMonthYear.apply(elem[0],\r\n\t\t\t\t\t\t\t[inst.drawDate.getFullYear(), inst.drawDate.getMonth() + 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (inst.inline) {\r\n\t\t\t\t\tvar index = $('a, :input', elem).index($(':focus', elem));\r\n\t\t\t\t\telem.html(this._generateContent(elem[0], inst));\r\n\t\t\t\t\tvar focus = elem.find('a, :input');\r\n\t\t\t\t\tfocus.eq(Math.max(Math.min(index, focus.length - 1), 0)).focus();\r\n\t\t\t\t}\r\n\t\t\t\telse if (plugin.curInst === inst) {\r\n\t\t\t\t\tif (!inst.div) {\r\n\t\t\t\t\t\tinst.div = $('<div></div>').addClass(this._popupClass).\r\n\t\t\t\t\t\t\tcss({display: (hidden ? 'none' : 'static'), position: 'absolute',\r\n\t\t\t\t\t\t\t\tleft: elem.offset().left, top: elem.offset().top + elem.outerHeight()}).\r\n\t\t\t\t\t\t\tappendTo($(inst.options.popupContainer || 'body'));\r\n\t\t\t\t\t\tif ($.fn.mousewheel) {\r\n\t\t\t\t\t\t\tinst.div.mousewheel(this._doMouseWheel);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinst.div.html(this._generateContent(elem[0], inst));\r\n\t\t\t\t\telem.focus();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Update the input field and any alternate field with the current dates.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem The control to use.\r\n\t\t\t@param {boolean} keyUp <code>true</code> if coming from <code>keyUp</code> processing (internal). */\r\n\t\t_updateInput: function(elem, keyUp) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tvar value = '';\r\n\t\t\t\tvar altValue = '';\r\n\t\t\t\tvar sep = (inst.options.multiSelect ? inst.options.multiSeparator :\r\n\t\t\t\t\tinst.options.rangeSeparator);\r\n\t\t\t\tvar altFormat = inst.options.altFormat || inst.options.dateFormat;\r\n\t\t\t\tfor (var i = 0; i < inst.selectedDates.length; i++) {\r\n\t\t\t\t\tvalue += (keyUp ? '' : (i > 0 ? sep : '') + plugin.formatDate(\r\n\t\t\t\t\t\tinst.options.dateFormat, inst.selectedDates[i], inst.getConfig()));\r\n\t\t\t\t\taltValue += (i > 0 ? sep : '') + plugin.formatDate(\r\n\t\t\t\t\t\taltFormat, inst.selectedDates[i], inst.getConfig());\r\n\t\t\t\t}\r\n\t\t\t\tif (!inst.inline && !keyUp) {\r\n\t\t\t\t\t$(elem).val(value);\r\n\t\t\t\t}\r\n\t\t\t\t$(inst.options.altField).val(altValue);\r\n\t\t\t\tif ($.isFunction(inst.options.onSelect) && !keyUp && !inst.inSelect) {\r\n\t\t\t\t\tinst.inSelect = true; // Prevent endless loops\r\n\t\t\t\t\tinst.options.onSelect.apply(elem, [inst.selectedDates]);\r\n\t\t\t\t\tinst.inSelect = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Retrieve the size of left and top borders for an element.\r\n\t\t\t@private\r\n\t\t\t@param {jQuery} elem The element of interest.\r\n\t\t\t@return {number[]} The left and top borders. */\r\n\t\t_getBorders: function(elem) {\r\n\t\t\tvar convert = function(value) {\r\n\t\t\t\treturn {thin: 1, medium: 3, thick: 5}[value] || value;\r\n\t\t\t};\r\n\t\t\treturn [parseFloat(convert(elem.css('border-left-width'))),\r\n\t\t\t\tparseFloat(convert(elem.css('border-top-width')))];\r\n\t\t},\r\n\r\n\t\t/** Check positioning to remain on the screen.\r\n\t\t\t@private\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {object} The updated offset for the datepicker. */\r\n\t\t_checkOffset: function(inst) {\r\n\t\t\tvar base = (inst.elem.is(':hidden') && inst.trigger ? inst.trigger : inst.elem);\r\n\t\t\tvar offset = base.offset();\r\n\t\t\tvar browserWidth = $(window).width();\r\n\t\t\tvar browserHeight = $(window).height();\r\n\t\t\tif (browserWidth === 0) {\r\n\t\t\t\treturn offset;\r\n\t\t\t}\r\n\t\t\tvar isFixed = false;\r\n\t\t\t$(inst.elem).parents().each(function() {\r\n\t\t\t\tisFixed = isFixed || ($(this).css('position') === 'fixed');\r\n\t\t\t\treturn !isFixed;\r\n\t\t\t});\r\n\t\t\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\r\n\t\t\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\r\n\t\t\tvar above = offset.top - (isFixed ? scrollY : 0) - inst.div.outerHeight();\r\n\t\t\tvar below = offset.top - (isFixed ? scrollY : 0) + base.outerHeight();\r\n\t\t\tvar alignL = offset.left - (isFixed ? scrollX : 0);\r\n\t\t\tvar alignR = offset.left - (isFixed ? scrollX : 0) + base.outerWidth() - inst.div.outerWidth();\r\n\t\t\tvar tooWide = (offset.left - scrollX + inst.div.outerWidth()) > browserWidth;\r\n\t\t\tvar tooHigh = (offset.top - scrollY + inst.elem.outerHeight() +\r\n\t\t\t\tinst.div.outerHeight()) > browserHeight;\r\n\t\t\tinst.div.css('position', isFixed ? 'fixed' : 'absolute');\r\n\t\t\tvar alignment = inst.options.alignment;\r\n\t\t\tif (alignment === 'topLeft') {\r\n\t\t\t\toffset = {left: alignL, top: above};\r\n\t\t\t}\r\n\t\t\telse if (alignment === 'topRight') {\r\n\t\t\t\toffset = {left: alignR, top: above};\r\n\t\t\t}\r\n\t\t\telse if (alignment === 'bottomLeft') {\r\n\t\t\t\toffset = {left: alignL, top: below};\r\n\t\t\t}\r\n\t\t\telse if (alignment === 'bottomRight') {\r\n\t\t\t\toffset = {left: alignR, top: below};\r\n\t\t\t}\r\n\t\t\telse if (alignment === 'top') {\r\n\t\t\t\toffset = {left: (inst.options.isRTL || tooWide ? alignR : alignL), top: above};\r\n\t\t\t}\r\n\t\t\telse { // bottom\r\n\t\t\t\toffset = {left: (inst.options.isRTL || tooWide ? alignR : alignL),\r\n\t\t\t\t\ttop: (tooHigh ? above : below)};\r\n\t\t\t}\r\n\t\t\toffset.left = Math.max((isFixed ? 0 : scrollX), offset.left);\r\n\t\t\toffset.top = Math.max((isFixed ? 0 : scrollY), offset.top);\r\n\t\t\treturn offset;\r\n\t\t},\r\n\r\n\t\t/** Close date picker if clicked elsewhere.\r\n\t\t\t@private\r\n\t\t\t@param {MouseEvent} event The mouse click to check. */\r\n\t\t_checkExternalClick: function(event) {\r\n\t\t\tif (!plugin.curInst) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar elem = $(event.target);\r\n\t\t\tif (elem.closest('.' + plugin._popupClass + ',.' + plugin._triggerClass).length === 0 &&\r\n\t\t\t\t\t!elem.hasClass(plugin._getMarker())) {\r\n\t\t\t\tplugin.hide(plugin.curInst);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Hide a popup datepicker.\r\n\t\t\t@param {Element|object} elem The control to use or the current instance settings.\r\n\t\t\t@param {boolean} [immediate=false] <code>true</code> to close immediately without animation (internal).\r\n\t\t\t@example $(selector).datepick('hide') */\r\n\t\thide: function(elem, immediate) {\r\n\t\t\tif (!elem) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif ($.isEmptyObject(inst)) {\r\n\t\t\t\tinst = elem;\r\n\t\t\t}\r\n\t\t\tif (inst && inst === plugin.curInst) {\r\n\t\t\t\tvar showAnim = (immediate ? '' : inst.options.showAnim);\r\n\t\t\t\tvar showSpeed = inst.options.showSpeed;\r\n\t\t\t\tshowSpeed = (showSpeed === 'normal' && $.ui &&\r\n\t\t\t\t\tparseInt($.ui.version.substring(2)) >= 8 ? '_default' : showSpeed);\r\n\t\t\t\tvar postProcess = function() {\r\n\t\t\t\t\tif (!inst.div) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinst.div.remove();\r\n\t\t\t\t\tinst.div = null;\r\n\t\t\t\t\tplugin.curInst = null;\r\n\t\t\t\t\tif ($.isFunction(inst.options.onClose)) {\r\n\t\t\t\t\t\tinst.options.onClose.apply(elem, [inst.selectedDates]);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tinst.div.stop();\r\n\t\t\t\tif ($.effects && ($.effects[showAnim] || ($.effects.effect && $.effects.effect[showAnim]))) {\r\n\t\t\t\t\tinst.div.hide(showAnim, inst.options.showOptions, showSpeed, postProcess);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar hideAnim = (showAnim === 'slideDown' ? 'slideUp' :\r\n\t\t\t\t\t\t(showAnim === 'fadeIn' ? 'fadeOut' : 'hide'));\r\n\t\t\t\t\tinst.div[hideAnim]((showAnim ? showSpeed : ''), postProcess);\r\n\t\t\t\t}\r\n\t\t\t\tif (!showAnim) {\r\n\t\t\t\t\tpostProcess();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Handle keystrokes in the datepicker.\r\n\t\t\t@private\r\n\t\t\t@param {KeyEvent} event The keystroke.\r\n\t\t\t@return {boolean} <code>true</code> if not handled, <code>false</code> if handled. */\r\n\t\t_keyDown: function(event) {\r\n\t\t\tvar elem = (event.data && event.data.elem) || event.target;\r\n\t\t\tvar inst = plugin._getInst(elem);\r\n\t\t\tvar handled = false;\r\n\t\t\tvar command = null;\r\n\t\t\tif (inst.inline || inst.div) {\r\n\t\t\t\tif (event.keyCode === 9) { // Tab - close\r\n\t\t\t\t\tplugin.hide(elem);\r\n\t\t\t\t}\r\n\t\t\t\telse if (event.keyCode === 13) { // Enter - select\r\n\t\t\t\t\tplugin.selectDate(elem,\r\n\t\t\t\t\t\t$('a.' + inst.options.renderer.highlightedClass, inst.div)[0]);\r\n\t\t\t\t\thandled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse { // Command keystrokes\r\n\t\t\t\t\tfor (var key in inst.options.commands) {\r\n\t\t\t\t\t\tif (inst.options.commands.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\tcommand = inst.options.commands[key];\r\n\t\t\t\t\t\t\t/* jshint -W018 */ // Dislikes !!\r\n\t\t\t\t\t\t\tif (command.keystroke.keyCode === event.keyCode &&\r\n\t\t\t\t\t\t\t\t\t!!command.keystroke.ctrlKey === !!(event.ctrlKey || event.metaKey) &&\r\n\t\t\t\t\t\t\t\t\t!!command.keystroke.altKey === event.altKey &&\r\n\t\t\t\t\t\t\t\t\t!!command.keystroke.shiftKey === event.shiftKey) {\r\n\t\t\t\t\t\t\t/* jshint +W018 */\r\n\t\t\t\t\t\t\t\tplugin.performAction(elem, key);\r\n\t\t\t\t\t\t\t\thandled = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse { // Show on 'current' keystroke\r\n\t\t\t\tcommand = inst.options.commands.current;\r\n\t\t\t\t/* jshint -W018 */ // Dislikes !!\r\n\t\t\t\tif (command.keystroke.keyCode === event.keyCode &&\r\n\t\t\t\t\t\t!!command.keystroke.ctrlKey === !!(event.ctrlKey || event.metaKey) &&\r\n\t\t\t\t\t\t!!command.keystroke.altKey === event.altKey &&\r\n\t\t\t\t\t\t!!command.keystroke.shiftKey === event.shiftKey) {\r\n\t\t\t\t/* jshint +W018 */\r\n\t\t\t\t\tplugin.show(elem);\r\n\t\t\t\t\thandled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinst.ctrlKey = ((event.keyCode < 48 && event.keyCode !== 32) || event.ctrlKey || event.metaKey);\r\n\t\t\tif (handled) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t}\r\n\t\t\treturn !handled;\r\n\t\t},\r\n\r\n\t\t/** Filter keystrokes in the datepicker.\r\n\t\t\t@private\r\n\t\t\t@param {KeyEvent} event The keystroke.\r\n\t\t\t@return {boolean} <code>true</code> if allowed, <code>false</code> if not allowed. */\r\n\t\t_keyPress: function(event) {\r\n\t\t\tvar inst = plugin._getInst((event.data && event.data.elem) || event.target);\r\n\t\t\tif (!$.isEmptyObject(inst) && inst.options.constrainInput) {\r\n\t\t\t\tvar ch = String.fromCharCode(event.keyCode || event.charCode);\r\n\t\t\t\tvar allowedChars = plugin._allowedChars(inst);\r\n\t\t\t\treturn (event.metaKey || inst.ctrlKey || ch < ' ' ||\r\n\t\t\t\t\t!allowedChars || allowedChars.indexOf(ch) > -1);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/** Determine the set of characters allowed by the date format.\r\n\t\t\t@private\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {string} The set of allowed characters, or <code>null</code> if anything allowed. */\r\n\t\t_allowedChars: function(inst) {\r\n\t\t\tvar allowedChars = (inst.options.multiSelect ? inst.options.multiSeparator :\r\n\t\t\t\t(inst.options.rangeSelect ? inst.options.rangeSeparator : ''));\r\n\t\t\tvar literal = false;\r\n\t\t\tvar hasNum = false;\r\n\t\t\tvar dateFormat = inst.options.dateFormat;\r\n\t\t\tfor (var i = 0; i < dateFormat.length; i++) {\r\n\t\t\t\tvar ch = dateFormat.charAt(i);\r\n\t\t\t\tif (literal) {\r\n\t\t\t\t\tif (ch === '\\'' && dateFormat.charAt(i + 1) !== '\\'') {\r\n\t\t\t\t\t\tliteral = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tallowedChars += ch;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tswitch (ch) {\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\tcase 'm':\r\n\t\t\t\t\t\tcase 'o':\r\n\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\tallowedChars += (hasNum ? '' : '0123456789');\r\n\t\t\t\t\t\t\thasNum = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'y':\r\n\t\t\t\t\t\tcase '@':\r\n\t\t\t\t\t\tcase '!':\r\n\t\t\t\t\t\t\tallowedChars += (hasNum ? '' : '0123456789') + '-';\r\n\t\t\t\t\t\t\thasNum = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'J':\r\n\t\t\t\t\t\t\tallowedChars += (hasNum ? '' : '0123456789') + '-.';\r\n\t\t\t\t\t\t\thasNum = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'D':\r\n\t\t\t\t\t\tcase 'M':\r\n\t\t\t\t\t\tcase 'Y':\r\n\t\t\t\t\t\t\treturn null; // Accept anything\r\n\t\t\t\t\t\tcase '\\'':\r\n\t\t\t\t\t\t\tif (dateFormat.charAt(i + 1) === '\\'') {\r\n\t\t\t\t\t\t\t\tallowedChars += '\\'';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tliteral = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tallowedChars += ch;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn allowedChars;\r\n\t\t},\r\n\r\n\t\t/** Synchronise datepicker with the field.\r\n\t\t\t@private\r\n\t\t\t@param {KeyEvent} event The keystroke.\r\n\t\t\t@return {boolean} <code>true</code> if allowed, <code>false</code> if not allowed. */\r\n\t\t_keyUp: function(event) {\r\n\t\t\tvar elem = (event.data && event.data.elem) || event.target;\r\n\t\t\tvar inst = plugin._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst) && !inst.ctrlKey && inst.lastVal !== inst.elem.val()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar dates = plugin._extractDates(inst, inst.elem.val());\r\n\t\t\t\t\tif (dates.length > 0) {\r\n\t\t\t\t\t\tplugin.setDate(elem, dates, null, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/** Increment/decrement month/year on mouse wheel activity.\r\n\t\t\t@private\r\n\t\t\t@param {event} event The mouse wheel event.\r\n\t\t\t@param {number} delta The amount of change. */\r\n\t\t_doMouseWheel: function(event, delta) {\r\n\t\t\tvar elem = (plugin.curInst && plugin.curInst.elem[0]) ||\r\n\t\t\t\t$(event.target).closest('.' + plugin._getMarker())[0];\r\n\t\t\tif (plugin.isDisabled(elem)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar inst = plugin._getInst(elem);\r\n\t\t\tif (inst.options.useMouseWheel) {\r\n\t\t\t\tdelta = (delta < 0 ? -1 : +1);\r\n\t\t\t\tplugin.changeMonth(elem, -inst.options[event.ctrlKey ? 'monthsToJump' : 'monthsToStep'] * delta);\r\n\t\t\t}\r\n\t\t\tevent.preventDefault();\r\n\t\t},\r\n\r\n\t\t/** Clear an input and close a popup datepicker.\r\n\t\t\t@param {Element} elem The control to use.\r\n\t\t\t@example $(selector).datepick('clear') */\r\n\t\tclear: function(elem) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tinst.selectedDates = [];\r\n\t\t\t\tthis.hide(elem);\r\n\t\t\t\tvar defaultDate = inst.get('defaultDate');\r\n\t\t\t\tif (inst.options.selectDefaultDate && defaultDate) {\r\n\t\t\t\t\tthis.setDate(elem, plugin.newDate(defaultDate || plugin.today()));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._updateInput(elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Retrieve the selected date(s) for a datepicker.\r\n\t\t\t@param {Element} elem The control to examine.\r\n\t\t\t@return {Date[]} The selected date(s).\r\n\t\t\t@example var dates = $(selector).datepick('getDate') */\r\n\t\tgetDate: function(elem) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\treturn (!$.isEmptyObject(inst) ? inst.selectedDates : []);\r\n\t\t},\r\n\r\n\t\t/** Set the selected date(s) for a datepicker.\r\n\t\t\t@param {Element} elem The control to examine.\r\n\t\t\t@param {Date|number|string|array} dates The selected date(s), as a <code>Date</code>,\r\n\t\t\t\t\tor as a string in the current {@linkcode module:Datepick~regionalOptions|dateFormat}\r\n\t\t\t\t\tor as a numeric offset - in days from today,\r\n\t\t\t\t\tor as a string of amounts and periods, e.g. '+1m +2w',\r\n\t\t\t\t\tusing 'd' for days, 'w' for weeks, 'm' for months, and 'y' for years,\r\n\t\t\t\t\tor as an array of these.\r\n\t\t\t@param {Date|number|string} [endDate] The ending date for a range.\r\n\t\t\t@param {boolean} [keyUp=false] <code>true</code> if coming from <code>keyUp</code> processing (internal).\r\n\t\t\t@param {boolean} [setOpt=false] <code>true</code> if coming from option processing (internal).\r\n\t\t\t@example $(selector).datepick('setDate', new Date(2014, 12-1, 25))\r\n$(selector).datepick('setDate', '12/25/2014', '01/01/2015')\r\n$(selector).datepick('setDate', [date1, date2, date3]) */\r\n\t\tsetDate: function(elem, dates, endDate, keyUp, setOpt) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tif (!$.isArray(dates)) {\r\n\t\t\t\t\tdates = [dates];\r\n\t\t\t\t\tif (endDate) {\r\n\t\t\t\t\t\tdates.push(endDate);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar minDate = inst.get('minDate');\r\n\t\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\t\tvar curDate = inst.selectedDates[0];\r\n\t\t\t\tinst.selectedDates = [];\r\n\t\t\t\tfor (var i = 0; i < dates.length; i++) {\r\n\t\t\t\t\tvar date = plugin.determineDate(\r\n\t\t\t\t\t\tdates[i], null, curDate, inst.options.dateFormat, inst.getConfig());\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tif ((!minDate || date.getTime() >= minDate.getTime()) &&\r\n\t\t\t\t\t\t\t\t(!maxDate || date.getTime() <= maxDate.getTime())) {\r\n\t\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\t\tfor (var j = 0; j < inst.selectedDates.length; j++) {\r\n\t\t\t\t\t\t\t\tif (inst.selectedDates[j].getTime() === date.getTime()) {\r\n\t\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (!found) {\r\n\t\t\t\t\t\t\t\tinst.selectedDates.push(date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tinst.selectedDates.splice(inst.options.multiSelect ||\r\n\t\t\t\t\t(inst.options.rangeSelect ? 2 : 1), inst.selectedDates.length);\r\n\t\t\t\tif (inst.options.rangeSelect) {\r\n\t\t\t\t\tswitch (inst.selectedDates.length) {\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tinst.selectedDates[1] = inst.selectedDates[0];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tinst.selectedDates[1] =\r\n\t\t\t\t\t\t\t\t(inst.selectedDates[0].getTime() > inst.selectedDates[1].getTime() ?\r\n\t\t\t\t\t\t\t\tinst.selectedDates[0] : inst.selectedDates[1]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinst.pickingRange = false;\r\n\t\t\t\t}\r\n\t\t\t\tinst.prevDate = (inst.drawDate ? plugin.newDate(inst.drawDate) : null);\r\n\t\t\t\tinst.drawDate = this._checkMinMax(plugin.newDate(inst.selectedDates[0] ||\r\n\t\t\t\t\tinst.get('defaultDate') || plugin.today()), inst);\r\n\t\t\t\tif (!setOpt) {\r\n\t\t\t\t\tthis._update(elem);\r\n\t\t\t\t\tthis._updateInput(elem, keyUp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Determine whether a date is selectable for this datepicker.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem The control to check.\r\n\t\t\t@param {Date|string|number} date The date to check.\r\n\t\t\t@return {boolean} <code>true</code> if selectable, <code>false</code> if not.\r\n\t\t\t@example var selectable = $(selector).datepick('isSelectable', date) */\r\n\t\tisSelectable: function(elem, date) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif ($.isEmptyObject(inst)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdate = plugin.determineDate(date, inst.selectedDates[0] || this.today(), null,\r\n\t\t\t\tinst.options.dateFormat, inst.getConfig());\r\n\t\t\treturn this._isSelectable(elem, date, inst.options.onDate,\r\n\t\t\t\tinst.get('minDate'), inst.get('maxDate'));\r\n\t\t},\r\n\r\n\t\t/** Internally determine whether a date is selectable for this datepicker.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem the control to check.\r\n\t\t\t@param {Date} date The date to check.\r\n\t\t\t@param {DatepickOnDate|boolean} onDate Any {@linkcode module:Datepick~defaultOptions|onDate} callback\r\n\t\t\t\t\tor <code>callback.selectable</code>.\r\n\t\t\t@param {Date} minDate The minimum allowed date.\r\n\t\t\t@param {Date} maxDate The maximum allowed date.\r\n\t\t\t@return {boolean} <code>true</code> if selectable, <code>false</code> if not. */\r\n\t\t_isSelectable: function(elem, date, onDate, minDate, maxDate) {\r\n\t\t\tvar dateInfo = (typeof onDate === 'boolean' ? {selectable: onDate} :\r\n\t\t\t\t(!$.isFunction(onDate) ? {} : onDate.apply(elem, [date, true])));\r\n\t\t\treturn (dateInfo.selectable !== false) &&\r\n\t\t\t\t(!minDate || date.getTime() >= minDate.getTime()) &&\r\n\t\t\t\t(!maxDate || date.getTime() <= maxDate.getTime());\r\n\t\t},\r\n\r\n\t\t/** Perform a {@linkcode module:Datepick~commands|named action} for a datepicker.\r\n\t\t\t@param {element} elem The control to affect.\r\n\t\t\t@param {string} action The name of the action.\r\n\t\t\t@example $(selector).datepick('performAction', 'prev') */\r\n\t\tperformAction: function(elem, action) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst) && !this.isDisabled(elem)) {\r\n\t\t\t\tvar commands = inst.options.commands;\r\n\t\t\t\tif (commands[action] && commands[action].enabled.apply(elem, [inst])) {\r\n\t\t\t\t\tcommands[action].action.apply(elem, [inst]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Set the currently shown month and day, defaulting to today.\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@param {number} [year] The year to show.\r\n\t\t\t@param {number} [month] The month to show (1-12).\r\n\t\t\t@param {number} [day] The day to show.\r\n\t\t\t@example $(selector).datepick('showMonth', 2014, 12, 25) */\r\n\t\tshowMonth: function(elem, year, month, day) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst) && (typeof day !== 'undefined' ||\r\n\t\t\t\t\t(inst.drawDate.getFullYear() !== year || inst.drawDate.getMonth() + 1 !== month))) {\r\n\t\t\t\tinst.prevDate = plugin.newDate(inst.drawDate);\r\n\t\t\t\tvar show = this._checkMinMax((typeof year !== 'undefined' ?\r\n\t\t\t\t\tplugin.newDate(year, month, 1) : plugin.today()), inst);\r\n\t\t\t\tinst.drawDate = plugin.newDate(show.getFullYear(), show.getMonth() + 1,\r\n\t\t\t\t\t(typeof day !== 'undefined' ? day : Math.min(inst.drawDate.getDate(),\r\n\t\t\t\t\tplugin.daysInMonth(show.getFullYear(), show.getMonth() + 1))));\r\n\t\t\t\tthis._update(elem);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Adjust the currently shown month.\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@param {number} offset The number of months to change by.\r\n\t\t\t@example $(selector).datepick('changeMonth', 2)*/\r\n\t\tchangeMonth: function(elem, offset) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tvar date = plugin.add(plugin.newDate(inst.drawDate), offset, 'm');\r\n\t\t\t\tthis.showMonth(elem, date.getFullYear(), date.getMonth() + 1);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Adjust the currently shown day.\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@param {number} offset The number of days to change by.\r\n\t\t\t@example $(selector).datepick('changeDay', 7)*/\r\n\t\tchangeDay: function(elem, offset) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst)) {\r\n\t\t\t\tvar date = plugin.add(plugin.newDate(inst.drawDate), offset, 'd');\r\n\t\t\t\tthis.showMonth(elem, date.getFullYear(), date.getMonth() + 1, date.getDate());\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Restrict a date to the minimum/maximum specified.\r\n\t\t\t@private\r\n\t\t\t@param {Date} date The date to check.\r\n\t\t\t@param {object} inst The current instance settings. */\r\n\t\t_checkMinMax: function(date, inst) {\r\n\t\t\tvar minDate = inst.get('minDate');\r\n\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\tdate = (minDate && date.getTime() < minDate.getTime() ? plugin.newDate(minDate) : date);\r\n\t\t\tdate = (maxDate && date.getTime() > maxDate.getTime() ? plugin.newDate(maxDate) : date);\r\n\t\t\treturn date;\r\n\t\t},\r\n\r\n\t\t/** Retrieve the date associated with an entry in the datepicker.\r\n\t\t\t@param {Element} elem The control to examine.\r\n\t\t\t@param {Element} target The selected datepicker element.\r\n\t\t\t@return {Date} The corresponding date, or <code>null</code>.\r\n\t\t\t@example var date = $(selector).datepick('retrieveDate', $('div.datepick-popup a:contains(10)')[0]) */\r\n\t\tretrieveDate: function(elem, target) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\treturn ($.isEmptyObject(inst) ? null : this._normaliseDate(\r\n\t\t\t\tnew Date(parseInt(target.className.replace(/^.*dp(-?\\d+).*$/, '$1'), 10))));\r\n\t\t},\r\n\r\n\t\t/** Select a date for this datepicker.\r\n\t\t\t@param {Element} elem The control to examine.\r\n\t\t\t@param {Element} target The selected datepicker element.\r\n\t\t\t@example $(selector).datepick('selectDate', $('div.datepick-popup a:contains(10)')[0]) */\r\n\t\tselectDate: function(elem, target) {\r\n\t\t\tvar inst = this._getInst(elem);\r\n\t\t\tif (!$.isEmptyObject(inst) && !this.isDisabled(elem)) {\r\n\t\t\t\tvar date = this.retrieveDate(elem, target);\r\n\t\t\t\tif (inst.options.multiSelect) {\r\n\t\t\t\t\tvar found = false;\r\n\t\t\t\t\tfor (var i = 0; i < inst.selectedDates.length; i++) {\r\n\t\t\t\t\t\tif (date.getTime() === inst.selectedDates[i].getTime()) {\r\n\t\t\t\t\t\t\tinst.selectedDates.splice(i, 1);\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!found && inst.selectedDates.length < inst.options.multiSelect) {\r\n\t\t\t\t\t\tinst.selectedDates.push(date);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (inst.options.rangeSelect) {\r\n\t\t\t\t\tif (inst.pickingRange) {\r\n\t\t\t\t\t\tinst.selectedDates[1] = date;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinst.selectedDates = [date, date];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinst.pickingRange = !inst.pickingRange;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinst.selectedDates = [date];\r\n\t\t\t\t}\r\n\t\t\t\tinst.prevDate = inst.drawDate = plugin.newDate(date);\r\n\t\t\t\tthis._updateInput(elem);\r\n\t\t\t\tif (inst.inline || inst.pickingRange || inst.selectedDates.length <\r\n\t\t\t\t\t\t(inst.options.multiSelect || (inst.options.rangeSelect ? 2 : 1))) {\r\n\t\t\t\t\tthis._update(elem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.hide(elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Generate the datepicker content for this control.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {jQuery} The datepicker content */\r\n\t\t_generateContent: function(elem, inst) {\r\n\t\t\tvar monthsToShow = inst.options.monthsToShow;\r\n\t\t\tmonthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);\r\n\t\t\tinst.drawDate = this._checkMinMax(\r\n\t\t\t\tinst.drawDate || inst.get('defaultDate') || plugin.today(), inst);\r\n\t\t\tvar drawDate = plugin._applyMonthsOffset(plugin.newDate(inst.drawDate), inst);\r\n\t\t\t// Generate months\r\n\t\t\tvar monthRows = '';\r\n\t\t\tfor (var row = 0; row < monthsToShow[0]; row++) {\r\n\t\t\t\tvar months = '';\r\n\t\t\t\tfor (var col = 0; col < monthsToShow[1]; col++) {\r\n\t\t\t\t\tmonths += this._generateMonth(elem, inst, drawDate.getFullYear(),\r\n\t\t\t\t\t\tdrawDate.getMonth() + 1, inst.options.renderer, (row === 0 && col === 0));\r\n\t\t\t\t\tplugin.add(drawDate, 1, 'm');\r\n\t\t\t\t}\r\n\t\t\t\tmonthRows += this._prepare(inst.options.renderer.monthRow, inst).replace(/\\{months\\}/, months);\r\n\t\t\t}\r\n\t\t\tvar picker = this._prepare(inst.options.renderer.picker, inst).replace(/\\{months\\}/, monthRows).\r\n\t\t\t\treplace(/\\{weekHeader\\}/g, this._generateDayHeaders(inst, inst.options.renderer));\r\n\t\t\t// Add commands\r\n\t\t\tvar addCommand = function(type, open, close, name, classes) {\r\n\t\t\t\tif (picker.indexOf('{' + type + ':' + name + '}') === -1) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar command = inst.options.commands[name];\r\n\t\t\t\tvar date = (inst.options.commandsAsDateFormat ? command.date.apply(elem, [inst]) : null);\r\n\t\t\t\tpicker = picker.replace(new RegExp('\\\\{' + type + ':' + name + '\\\\}', 'g'),\r\n\t\t\t\t\t'<' + open + (command.status ? ' title=\"' + inst.options[command.status] + '\"' : '') +\r\n\t\t\t\t\t' class=\"' + inst.options.renderer.commandClass + ' ' +\r\n\t\t\t\t\tinst.options.renderer.commandClass + '-' + name + ' ' + classes +\r\n\t\t\t\t\t(command.enabled(inst) ? '' : ' ' + inst.options.renderer.disabledClass) + '\">' +\r\n\t\t\t\t\t(date ? plugin.formatDate(inst.options[command.text], date, inst.getConfig()) :\r\n\t\t\t\t\tinst.options[command.text]) + '</' + close + '>');\r\n\t\t\t};\r\n\t\t\tfor (var key in inst.options.commands) {\r\n\t\t\t\tif (inst.options.commands.hasOwnProperty(key)) {\r\n\t\t\t\t\taddCommand('button', 'button type=\"button\"', 'button', key,\r\n\t\t\t\t\t\tinst.options.renderer.commandButtonClass);\r\n\t\t\t\t\taddCommand('link', 'a href=\"javascript:void(0)\"', 'a', key,\r\n\t\t\t\t\t\tinst.options.renderer.commandLinkClass);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpicker = $(picker);\r\n\t\t\tif (monthsToShow[1] > 1) {\r\n\t\t\t\tvar count = 0;\r\n\t\t\t\t$(inst.options.renderer.monthSelector, picker).each(function() {\r\n\t\t\t\t\tvar nth = ++count % monthsToShow[1];\r\n\t\t\t\t\t$(this).addClass(nth === 1 ? 'first' : (nth === 0 ? 'last' : ''));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// Add datepicker behaviour\r\n\t\t\tvar self = this;\r\n\t\t\tfunction removeHighlight() {\r\n\t\t\t\t/* jshint -W040 */\r\n\t\t\t\t(inst.inline ? $(this).closest('.' + self._getMarker()) : inst.div).\r\n\t\t\t\t\tfind(inst.options.renderer.daySelector + ' a').\r\n\t\t\t\t\tremoveClass(inst.options.renderer.highlightedClass);\r\n\t\t\t\t/* jshint +W040 */\r\n\t\t\t}\r\n\t\t\tpicker.find(inst.options.renderer.daySelector + ' a').hover(\r\n\t\t\t\t\tfunction() {\r\n\t\t\t\t\t\tremoveHighlight.apply(this);\r\n\t\t\t\t\t\t$(this).addClass(inst.options.renderer.highlightedClass);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tremoveHighlight).\r\n\t\t\t\tclick(function() {\r\n\t\t\t\t\tself.selectDate(elem, this);\r\n\t\t\t\t}).end().\r\n\t\t\t\tfind('select.' + this._monthYearClass + ':not(.' + this._anyYearClass + ')').\r\n\t\t\t\tchange(function() {\r\n\t\t\t\t\tvar monthYear = $(this).val().split('/');\r\n\t\t\t\t\tself.showMonth(elem, parseInt(monthYear[1], 10), parseInt(monthYear[0], 10));\r\n\t\t\t\t}).end().\r\n\t\t\t\tfind('select.' + this._anyYearClass).click(function() {\r\n\t\t\t\t\t$(this).css('visibility', 'hidden').\r\n\t\t\t\t\t\tnext('input').css({left: this.offsetLeft, top: this.offsetTop,\r\n\t\t\t\t\t\twidth: this.offsetWidth, height: this.offsetHeight}).show().focus();\r\n\t\t\t\t}).end().\r\n\t\t\t\tfind('input.' + self._monthYearClass).change(function() {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar year = parseInt($(this).val(), 10);\r\n\t\t\t\t\t\tyear = (isNaN(year) ? inst.drawDate.getFullYear() : year);\r\n\t\t\t\t\t\tself.showMonth(elem, year, inst.drawDate.getMonth() + 1, inst.drawDate.getDate());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\twindow.alert(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}).keydown(function(event) {\r\n\t\t\t\t\tif (event.keyCode === 13) { // Enter\r\n\t\t\t\t\t\t$(event.elem).change();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (event.keyCode === 27) { // Escape\r\n\t\t\t\t\t\t$(event.elem).hide().prev('select').css('visibility', 'visible');\r\n\t\t\t\t\t\tinst.elem.focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t// Add keyboard handling\r\n\t\t\tvar data = {elem: inst.elem[0]};\r\n\t\t\tpicker.keydown(data, this._keyDown).keypress(data, this._keyPress).keyup(data, this._keyUp);\r\n\t\t\t// Add command behaviour\r\n\t\t\tpicker.find('.' + inst.options.renderer.commandClass).click(function() {\r\n\t\t\t\t\tif (!$(this).hasClass(inst.options.renderer.disabledClass)) {\r\n\t\t\t\t\t\tvar action = this.className.replace(\r\n\t\t\t\t\t\t\tnew RegExp('^.*' + inst.options.renderer.commandClass + '-([^ ]+).*$'), '$1');\r\n\t\t\t\t\t\tplugin.performAction(elem, action);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t// Add classes\r\n\t\t\tif (inst.options.isRTL) {\r\n\t\t\t\tpicker.addClass(inst.options.renderer.rtlClass);\r\n\t\t\t}\r\n\t\t\tif (monthsToShow[0] * monthsToShow[1] > 1) {\r\n\t\t\t\tpicker.addClass(inst.options.renderer.multiClass);\r\n\t\t\t}\r\n\t\t\tif (inst.options.pickerClass) {\r\n\t\t\t\tpicker.addClass(inst.options.pickerClass);\r\n\t\t\t}\r\n\t\t\t// Resize\r\n\t\t\t$('body').append(picker);\r\n\t\t\tvar width = 0;\r\n\t\t\tpicker.find(inst.options.renderer.monthSelector).each(function() {\r\n\t\t\t\twidth += $(this).outerWidth();\r\n\t\t\t});\r\n\t\t\tpicker.width(width / monthsToShow[0]);\r\n\t\t\t// Pre-show customisation\r\n\t\t\tif ($.isFunction(inst.options.onShow)) {\r\n\t\t\t\tinst.options.onShow.apply(elem, [picker, inst]);\r\n\t\t\t}\r\n\t\t\treturn picker;\r\n\t\t},\r\n\r\n\t\t/** Generate the content for a single month.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem The control to affect.\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@param {number} year The year to generate.\r\n\t\t\t@param {number} month The month to generate.\r\n\t\t\t@param {object} renderer The rendering templates.\r\n\t\t\t@param {boolean} first <code>true</code> if first of multiple months.\r\n\t\t\t@return {string} The month content. */\r\n\t\t_generateMonth: function(elem, inst, year, month, renderer, first) {\r\n\t\t\tvar daysInMonth = plugin.daysInMonth(year, month);\r\n\t\t\tvar monthsToShow = inst.options.monthsToShow;\r\n\t\t\tmonthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);\r\n\t\t\tvar fixedWeeks = inst.options.fixedWeeks || (monthsToShow[0] * monthsToShow[1] > 1);\r\n\t\t\tvar firstDay = inst.options.firstDay;\r\n\t\t\tvar leadDays = (plugin.newDate(year, month, 1).getDay() - firstDay + 7) % 7;\r\n\t\t\tvar numWeeks = (fixedWeeks ? 6 : Math.ceil((leadDays + daysInMonth) / 7));\r\n\t\t\tvar selectOtherMonths = inst.options.selectOtherMonths && inst.options.showOtherMonths;\r\n\t\t\tvar minDate = (inst.pickingRange ? inst.selectedDates[0] : inst.get('minDate'));\r\n\t\t\tvar maxDate = inst.get('maxDate');\r\n\t\t\tvar showWeeks = renderer.week.indexOf('{weekOfYear}') > -1;\r\n\t\t\tvar today = plugin.today();\r\n\t\t\tvar drawDate = plugin.newDate(year, month, 1);\r\n\t\t\tplugin.add(drawDate, -leadDays - (fixedWeeks && (drawDate.getDay() === firstDay) ? 7 : 0), 'd');\r\n\t\t\tvar ts = drawDate.getTime();\r\n\t\t\t// Generate weeks\r\n\t\t\tvar weeks = '';\r\n\t\t\tfor (var week = 0; week < numWeeks; week++) {\r\n\t\t\t\tvar weekOfYear = (!showWeeks ? '' : '<span class=\"dp' + ts + '\">' +\r\n\t\t\t\t\t($.isFunction(inst.options.calculateWeek) ? inst.options.calculateWeek(drawDate) : 0) + '</span>');\r\n\t\t\t\tvar days = '';\r\n\t\t\t\tfor (var day = 0; day < 7; day++) {\r\n\t\t\t\t\tvar selected = false;\r\n\t\t\t\t\tif (inst.options.rangeSelect && inst.selectedDates.length > 0) {\r\n\t\t\t\t\t\tselected = (drawDate.getTime() >= inst.selectedDates[0] &&\r\n\t\t\t\t\t\t\tdrawDate.getTime() <= inst.selectedDates[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor (var i = 0; i < inst.selectedDates.length; i++) {\r\n\t\t\t\t\t\t\tif (inst.selectedDates[i].getTime() === drawDate.getTime()) {\r\n\t\t\t\t\t\t\t\tselected = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dateInfo = (!$.isFunction(inst.options.onDate) ? {} :\r\n\t\t\t\t\t\tinst.options.onDate.apply(elem, [drawDate, drawDate.getMonth() + 1 === month]));\r\n\t\t\t\t\tvar selectable = (selectOtherMonths || drawDate.getMonth() + 1 === month) &&\r\n\t\t\t\t\t\tthis._isSelectable(elem, drawDate, dateInfo.selectable, minDate, maxDate);\r\n\t\t\t\t\tdays += this._prepare(renderer.day, inst).replace(/\\{day\\}/g,\r\n\t\t\t\t\t\t(selectable ? '<a href=\"javascript:void(0)\"' : '<span') +\r\n\t\t\t\t\t\t' class=\"dp' + ts + ' ' + (dateInfo.dateClass || '') +\r\n\t\t\t\t\t\t(selected && (selectOtherMonths || drawDate.getMonth() + 1 === month) ?\r\n\t\t\t\t\t\t' ' + renderer.selectedClass : '') +\r\n\t\t\t\t\t\t(selectable ? ' ' + renderer.defaultClass : '') +\r\n\t\t\t\t\t\t((drawDate.getDay() || 7) < 6 ? '' : ' ' + renderer.weekendClass) +\r\n\t\t\t\t\t\t(drawDate.getMonth() + 1 === month ? '' : ' ' + renderer.otherMonthClass) +\r\n\t\t\t\t\t\t(drawDate.getTime() === today.getTime() && (drawDate.getMonth() + 1) === month ?\r\n\t\t\t\t\t\t' ' + renderer.todayClass : '') +\r\n\t\t\t\t\t\t(drawDate.getTime() === inst.drawDate.getTime() && (drawDate.getMonth() + 1) === month ?\r\n\t\t\t\t\t\t' ' + renderer.highlightedClass : '') + '\"' +\r\n\t\t\t\t\t\t(dateInfo.title || (inst.options.dayStatus && selectable) ? ' title=\"' +\r\n\t\t\t\t\t\t(dateInfo.title || plugin.formatDate(\r\n\t\t\t\t\t\tinst.options.dayStatus, drawDate, inst.getConfig())) + '\"' : '') + '>' +\r\n\t\t\t\t\t\t(inst.options.showOtherMonths || (drawDate.getMonth() + 1) === month ?\r\n\t\t\t\t\t\tdateInfo.content || drawDate.getDate() : '&#160;') +\r\n\t\t\t\t\t\t(selectable ? '</a>' : '</span>'));\r\n\t\t\t\t\tplugin.add(drawDate, 1, 'd');\r\n\t\t\t\t\tts = drawDate.getTime();\r\n\t\t\t\t}\r\n\t\t\t\tweeks += this._prepare(renderer.week, inst).replace(/\\{days\\}/g, days).\r\n\t\t\t\t\treplace(/\\{weekOfYear\\}/g, weekOfYear);\r\n\t\t\t}\r\n\t\t\tvar monthHeader = this._prepare(renderer.month, inst).match(/\\{monthHeader(:[^\\}]+)?\\}/);\r\n\t\t\tmonthHeader = (monthHeader[0].length <= 13 ? 'MM yyyy' :\r\n\t\t\t\tmonthHeader[0].substring(13, monthHeader[0].length - 1));\r\n\t\t\tmonthHeader = (first ? this._generateMonthSelection(\r\n\t\t\t\tinst, year, month, minDate, maxDate, monthHeader, renderer) :\r\n\t\t\t\tplugin.formatDate(monthHeader, plugin.newDate(year, month, 1), inst.getConfig()));\r\n\t\t\tvar weekHeader = this._prepare(renderer.weekHeader, inst).\r\n\t\t\t\treplace(/\\{days\\}/g, this._generateDayHeaders(inst, renderer));\r\n\t\t\treturn this._prepare(renderer.month, inst).replace(/\\{monthHeader(:[^\\}]+)?\\}/g, monthHeader).\r\n\t\t\t\treplace(/\\{weekHeader\\}/g, weekHeader).replace(/\\{weeks\\}/g, weeks);\r\n\t\t},\r\n\r\n\t\t/** Generate the HTML for the day headers.\r\n\t\t\t@private\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@param {object} renderer The rendering templates.\r\n\t\t\t@return {string} A week's worth of day headers. */\r\n\t\t_generateDayHeaders: function(inst, renderer) {\r\n\t\t\tvar header = '';\r\n\t\t\tfor (var day = 0; day < 7; day++) {\r\n\t\t\t\tvar dow = (day + inst.options.firstDay) % 7;\r\n\t\t\t\theader += this._prepare(renderer.dayHeader, inst).replace(/\\{day\\}/g,\r\n\t\t\t\t\t'<span class=\"' + this._curDoWClass + dow + '\" title=\"' +\r\n\t\t\t\t\tinst.options.dayNames[dow] + '\">' + inst.options.dayNamesMin[dow] + '</span>');\r\n\t\t\t}\r\n\t\t\treturn header;\r\n\t\t},\r\n\r\n\t\t/** Generate selection controls for month.\r\n\t\t\t@private\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@param {number} year The year to generate.\r\n\t\t\t@param {number} month The month to generate.\r\n\t\t\t@param {Date} minDate The minimum date allowed.\r\n\t\t\t@param {Date} maxDate The maximum date allowed.\r\n\t\t\t@param {string} monthHeader The month/year format.\r\n\t\t\t@return {string} The month selection content. */\r\n\t\t_generateMonthSelection: function(inst, year, month, minDate, maxDate, monthHeader) {\r\n\t\t\tif (!inst.options.changeMonth) {\r\n\t\t\t\treturn plugin.formatDate(\r\n\t\t\t\t\tmonthHeader, plugin.newDate(year, month, 1), inst.getConfig());\r\n\t\t\t}\r\n\t\t\t// Months\r\n\t\t\tvar monthNames = inst.options['monthNames' + (monthHeader.match(/mm/i) ? '' : 'Short')];\r\n\t\t\tvar html = monthHeader.replace(/m+/i, '\\\\x2E').replace(/y+/i, '\\\\x2F');\r\n\t\t\tvar selector = '<select class=\"' + this._monthYearClass +\r\n\t\t\t\t'\" title=\"' + inst.options.monthStatus + '\">';\r\n\t\t\tfor (var m = 1; m <= 12; m++) {\r\n\t\t\t\tif ((!minDate || plugin.newDate(year, m, plugin.daysInMonth(year, m)).\r\n\t\t\t\t\t\tgetTime() >= minDate.getTime()) &&\r\n\t\t\t\t\t\t(!maxDate || plugin.newDate(year, m, 1).getTime() <= maxDate.getTime())) {\r\n\t\t\t\t\tselector += '<option value=\"' + m + '/' + year + '\"' +\r\n\t\t\t\t\t\t(month === m ? ' selected=\"selected\"' : '') + '>' +\r\n\t\t\t\t\t\tmonthNames[m - 1] + '</option>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tselector += '</select>';\r\n\t\t\thtml = html.replace(/\\\\x2E/, selector);\r\n\t\t\t// Years\r\n\t\t\tvar yearRange = inst.options.yearRange;\r\n\t\t\tif (yearRange === 'any') {\r\n\t\t\t\tselector = '<select class=\"' + this._monthYearClass + ' ' + this._anyYearClass +\r\n\t\t\t\t\t'\" title=\"' + inst.options.yearStatus + '\">' +\r\n\t\t\t\t\t'<option>' + year + '</option></select>' +\r\n\t\t\t\t\t'<input class=\"' + this._monthYearClass + ' ' + this._curMonthClass +\r\n\t\t\t\t\tmonth + '\" value=\"' + year + '\">';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tyearRange = yearRange.split(':');\r\n\t\t\t\tvar todayYear = plugin.today().getFullYear();\r\n\t\t\t\tvar start = (yearRange[0].match('c[+-].*') ? year + parseInt(yearRange[0].substring(1), 10) :\r\n\t\t\t\t\t((yearRange[0].match('[+-].*') ? todayYear : 0) + parseInt(yearRange[0], 10)));\r\n\t\t\t\tvar end = (yearRange[1].match('c[+-].*') ? year + parseInt(yearRange[1].substring(1), 10) :\r\n\t\t\t\t\t((yearRange[1].match('[+-].*') ? todayYear : 0) + parseInt(yearRange[1], 10)));\r\n\t\t\t\tselector = '<select class=\"' + this._monthYearClass +\r\n\t\t\t\t\t'\" title=\"' + inst.options.yearStatus + '\">';\r\n\t\t\t\tstart = plugin.add(plugin.newDate(start + 1, 1, 1), -1, 'd');\r\n\t\t\t\tend = plugin.newDate(end, 1, 1);\r\n\t\t\t\tvar addYear = function(y, yDisplay) {\r\n\t\t\t\t\tif (y !== 0) {\r\n\t\t\t\t\t\tselector += '<option value=\"' + month + '/' + y + '\"' +\r\n\t\t\t\t\t\t\t(year === y ? ' selected=\"selected\"' : '') + '>' + (yDisplay || y) + '</option>';\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar earlierLater = null;\r\n\t\t\t\tvar y = null;\r\n\t\t\t\tif (start.getTime() < end.getTime()) {\r\n\t\t\t\t\tstart = (minDate && minDate.getTime() > start.getTime() ? minDate : start).getFullYear();\r\n\t\t\t\t\tend = (maxDate && maxDate.getTime() < end.getTime() ? maxDate : end).getFullYear();\r\n\t\t\t\t\tearlierLater = Math.floor((end - start) / 2);\r\n\t\t\t\t\tif (!minDate || minDate.getFullYear() < start) {\r\n\t\t\t\t\t\taddYear(start - earlierLater, inst.options.earlierText);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (y = start; y <= end; y++) {\r\n\t\t\t\t\t\taddYear(y);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!maxDate || maxDate.getFullYear() > end) {\r\n\t\t\t\t\t\taddYear(end + earlierLater, inst.options.laterText);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tstart = (maxDate && maxDate.getTime() < start.getTime() ? maxDate : start).getFullYear();\r\n\t\t\t\t\tend = (minDate && minDate.getTime() > end.getTime() ? minDate : end).getFullYear();\r\n\t\t\t\t\tearlierLater = Math.floor((start - end) / 2);\r\n\t\t\t\t\tif (!maxDate || maxDate.getFullYear() > start) {\r\n\t\t\t\t\t\taddYear(start + earlierLater, inst.options.earlierText);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (y = start; y >= end; y--) {\r\n\t\t\t\t\t\taddYear(y);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!minDate || minDate.getFullYear() < end) {\r\n\t\t\t\t\t\taddYear(end - earlierLater, inst.options.laterText);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tselector += '</select>';\r\n\t\t\t}\r\n\t\t\thtml = html.replace(/\\\\x2F/, selector);\r\n\t\t\treturn html;\r\n\t\t},\r\n\r\n\t\t/** Prepare a render template for use.\r\n\t\t\tExclude popup/inline sections that are not applicable.\r\n\t\t\tLocalise text of the form: {l10n:name}.\r\n\t\t\t@private\r\n\t\t\t@param {string} text The text to localise.\r\n\t\t\t@param {object} inst The current instance settings.\r\n\t\t\t@return {string} The localised text. */\r\n\t\t_prepare: function(text, inst) {\r\n\t\t\tvar replaceSection = function(type, retain) {\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tvar start = text.indexOf('{' + type + ':start}');\r\n\t\t\t\t\tif (start === -1) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar end = text.substring(start).indexOf('{' + type + ':end}');\r\n\t\t\t\t\tif (end > -1) {\r\n\t\t\t\t\t\ttext = text.substring(0, start) +\r\n\t\t\t\t\t\t\t(retain ? text.substr(start + type.length + 8, end - type.length - 8) : '') +\r\n\t\t\t\t\t\t\ttext.substring(start + end + type.length + 6);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treplaceSection('inline', inst.inline);\r\n\t\t\treplaceSection('popup', !inst.inline);\r\n\t\t\tvar pattern = /\\{l10n:([^\\}]+)\\}/;\r\n\t\t\tvar matches = null;\r\n\t\t\twhile ((matches = pattern.exec(text))) {\r\n\t\t\t\ttext = text.replace(matches[0], inst.options[matches[1]]);\r\n\t\t\t}\r\n\t\t\treturn text;\r\n\t\t}\r\n\t});\r\n\r\n\tvar plugin = $.datepick; // Singleton instance\r\n\r\n\t$(function() {\r\n\t\t$(document).on('mousedown.' + pluginName, plugin._checkExternalClick).\r\n\t\t\ton('resize.' + pluginName, function() { plugin.hide(plugin.curInst); });\r\n\t});\r\n\r\n})(jQuery);"],"file":"jquery.datepick.js"}