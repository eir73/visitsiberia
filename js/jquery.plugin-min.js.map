{"version":3,"sources":["jquery.plugin.js"],"names":["initializing","window","JQClass","classes","extend","extender","prop","base","this","prototype","name","fn","__super","_super","args","apply","ret","arguments","key","obj1","obj2","obj3","_init","constructor","$","camelCase","replace","match","group","toUpperCase","JQPlugin","defaultOptions","regionalOptions","deepMerge","_getMarker","jqName","options","otherArgs","Array","slice","call","inst","returnValue","each","methodValue","concat","undefined","_attach","setDefaults","elem","hasClass","addClass","_getMetadata","_instSettings","data","_postAttach","option","toLowerCase","e","t","i","count","substring","length","parseJSON","hasOwnProperty","value","eval","_getInst","_optionsChanged","destroy","_preDestroy","removeData","removeClass","createPlugin","superClass","overrides","className","jQuery"],"mappings":"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","sourcesContent":["/* globals JQClass */\r\n/*! Simple JavaScript Inheritance\r\n * By John Resig http://ejohn.org/\r\n * MIT Licensed.\r\n */\r\n// Inspired by base2 and Prototype\r\n(function(){\r\n\t'use strict';\r\n\tvar initializing = false;\r\n\r\n\t// The base JQClass implementation (does nothing)\r\n\twindow.JQClass = function(){};\r\n\r\n\t// Collection of derived classes\r\n\tJQClass.classes = {};\r\n \r\n\t// Create a new JQClass that inherits from this class\r\n\tJQClass.extend = function extender(prop) {\r\n\t\tvar base = this.prototype;\r\n\r\n\t\t// Instantiate a base class (but only create the instance, don't run the init constructor)\r\n\t\tinitializing = true;\r\n\t\tvar prototype = new this();\r\n\t\tinitializing = false;\r\n\r\n\t\t// Copy the properties over onto the new prototype\r\n\t\tfor (var name in prop) { // jshint loopfunc:true\r\n\t\t\t// Check if we're overwriting an existing function\r\n\t\t\tif (typeof prop[name] === 'function' && typeof base[name] === 'function') {\r\n\t\t\t\tprototype[name] = (function (name, fn) {\r\n\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\tvar __super = this._super;\r\n\t\t\t\t\t\t// Add a new ._super() method that is the same method but on the super-class\r\n\t\t\t\t\t\tthis._super = function (args) {\r\n\t\t\t\t\t\t\treturn base[name].apply(this, args || []);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tvar ret = fn.apply(this, arguments);\r\n\t\t\t\t\t\t// The method only needs to be bound temporarily, so we remove it when we're done executing\r\n\t\t\t\t\t\tthis._super = __super;\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t};\r\n\t\t\t\t})(name, prop[name]);\r\n\t\t\t// Check if we're overwriting existing default options.\r\n\t\t\t} else if (typeof prop[name] === 'object' && typeof base[name] === 'object' && name === 'defaultOptions') {\r\n\t\t\t\tvar obj1 = base[name];\r\n\t\t\t\tvar obj2 = prop[name];\r\n\t\t\t\tvar obj3 = {};\r\n\t\t\t\tvar key;\r\n\t\t\t\tfor (key in obj1) { // jshint forin:false\r\n\t\t\t\t\tobj3[key] = obj1[key];\r\n\t\t\t\t}\r\n\t\t\t\tfor (key in obj2) { // jshint forin:false\r\n\t\t\t\t\tobj3[key] = obj2[key];\r\n\t\t\t\t}\r\n\t\t\t\tprototype[name] = obj3;\r\n\t\t\t} else {\r\n\t\t\t\tprototype[name] = prop[name];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The dummy class constructor\r\n\t\tfunction JQClass() {\r\n\t\t\t// All construction is actually done in the init method\r\n\t\t\tif (!initializing && this._init) {\r\n\t\t\t\tthis._init.apply(this, arguments);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Populate our constructed prototype object\r\n\t\tJQClass.prototype = prototype;\r\n\r\n\t\t// Enforce the constructor to be what we expect\r\n\t\tJQClass.prototype.constructor = JQClass;\r\n\r\n\t\t// And make this class extendable\r\n\t\tJQClass.extend = extender;\r\n\r\n\t\treturn JQClass;\r\n\t};\r\n})();\r\n/*! Abstract base class for collection plugins v1.0.2.\r\n\tWritten by Keith Wood (wood.keith{at}optusnet.com.au) December 2013.\r\n\tLicensed under the MIT license (http://keith-wood.name/licence.html). */\r\n(function($) { // Ensure $, encapsulate\r\n\t'use strict';\r\n\r\n\t/** <p>Abstract base class for collection plugins v1.0.2.</p>\r\n\t\t<p>Written by Keith Wood (wood.keith{at}optusnet.com.au) December 2013.</p>\r\n\t\t<p>Licensed under the MIT license (http://keith-wood.name/licence.html).</p>\r\n\t\t<p>Use {@link $.JQPlugin.createPlugin} to create new plugins using this framework.</p>\r\n\t\t<p>This base class provides common functionality such as:</p>\r\n\t\t<ul>\r\n\t\t\t<li>Creates jQuery bridge - allowing you to invoke your plugin on a collection of elements.</li>\r\n\t\t\t<li>Handles initialisation including reading settings from metadata -\r\n\t\t\t\tan instance object is attached to the affected element(s) containing all the necessary data.</li>\r\n\t\t\t<li>Handles option retrieval and update - options can be set through default values,\r\n\t\t\t\tthrough inline metadata, or through instantiation settings.<br>\r\n\t\t\t\tMetadata is specified as an attribute on the element:\r\n\t\t\t\t<code>data-&lt;pluginName>=\"&lt;option name>: '&lt;value>', ...\"</code>.\r\n\t\t\t\tDates should be specified as strings in this format: <code>'new Date(y, m-1, d)'</code>.</li>\r\n\t\t\t<li>Handles method calling - inner functions starting with '_'are inaccessible,\r\n\t\t\t\twhereas others can be called via <code>$(selector).pluginName('functionName')</code>.</li>\r\n\t\t\t<li>Handles plugin destruction - removing all trace of the plugin.</li>\r\n\t\t</ul>\r\n\t\t@module JQPlugin\r\n\t\t@abstract */\r\n\tJQClass.classes.JQPlugin = JQClass.extend({\r\n\r\n\t\t/** Name to identify this plugin.\r\n\t\t\t@example name: 'tabs' */\r\n\t\tname: 'plugin',\r\n\r\n\t\t/** Default options for instances of this plugin (default: {}).\r\n\t\t\t@example defaultOptions: {\r\n  selectedClass: 'selected',\r\n  triggers: 'click'\r\n} */\r\n\t\tdefaultOptions: {},\r\n\r\n\t\t/** Options dependent on the locale.\r\n\t\t\tIndexed by language and (optional) country code, with '' denoting the default language (English/US).\r\n\t\t\tNormally additional languages would be provided as separate files to all them to be included as needed.\r\n\t\t\t@example regionalOptions: {\r\n  '': {\r\n    greeting: 'Hi'\r\n  }\r\n} */\r\n\t\tregionalOptions: {},\r\n\r\n\t\t/** Whether or not a deep merge should be performed when accumulating options.\r\n\t\t\tThe default is <code>true</code> but can be overridden in a sub-class. */\r\n\t\tdeepMerge: true,\r\n\r\n\t\t/** Retrieve a marker class for affected elements.\r\n\t\t\tIn the format: <code>is-&lt;pluginName&gt;</code>.\r\n\t\t\t@protected\r\n\t\t\t@return {string} The marker class. */\r\n\t\t_getMarker: function() {\r\n\t\t\treturn 'is-' + this.name;\r\n\t\t},\r\n\r\n\t\t/** Initialise the plugin.\r\n\t\t\tCreate the jQuery bridge - plugin name <code>xyz</code>\r\n\t\t\tproduces singleton <code>$.xyz</code> and collection function <code>$.fn.xyz</code>.\r\n\t\t\t@protected */\r\n\t\t_init: function() {\r\n\t\t\t// Apply default localisations\r\n\t\t\t$.extend(this.defaultOptions, (this.regionalOptions && this.regionalOptions['']) || {});\r\n\t\t\t// Camel-case the name\r\n\t\t\tvar jqName = camelCase(this.name);\r\n\t\t\t// Expose jQuery singleton manager\r\n\t\t\t$[jqName] = this;\r\n\t\t\t// Expose jQuery collection plugin\r\n\t\t\t$.fn[jqName] = function(options) {\r\n\t\t\t\tvar otherArgs = Array.prototype.slice.call(arguments, 1);\r\n\t\t\t\tvar inst = this;\r\n\t\t\t\tvar returnValue = this;\r\n\t\t\t\tthis.each(function () {\r\n\t\t\t\t\tif (typeof options === 'string') {\r\n\t\t\t\t\t\tif (options[0] === '_' || !$[jqName][options]) {\r\n\t\t\t\t\t\t\tthrow 'Unknown method: ' + options;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar methodValue = $[jqName][options].apply($[jqName], [this].concat(otherArgs));\r\n\t\t\t\t\t\tif (methodValue !== inst && methodValue !== undefined) {\r\n\t\t\t\t\t\t\treturnValue = methodValue;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$[jqName]._attach(this, options);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn returnValue;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/** Set default options for all subsequent instances.\r\n\t\t\t@param {object} options The new default options.\r\n\t\t\t@example $.pluginName.setDefaults({name: value, ...}) */\r\n\t\tsetDefaults: function(options) {\r\n\t\t\t$.extend(this.defaultOptions, options || {});\r\n\t\t},\r\n\r\n\t\t/** Initialise an element. Called internally only.\r\n\t\t\tAdds an instance object as data named for the plugin.\r\n\t\t\tOverride {@linkcode module:JQPlugin~_postAttach|_postAttach} for plugin-specific processing.\r\n\t\t\t@private\r\n\t\t\t@param {Element} elem The element to enhance.\r\n\t\t\t@param {object} options Overriding settings. */\r\n\t\t_attach: function(elem, options) {\r\n\t\t\telem = $(elem);\r\n\t\t\tif (elem.hasClass(this._getMarker())) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telem.addClass(this._getMarker());\r\n\t\t\toptions = $.extend(this.deepMerge, {}, this.defaultOptions, this._getMetadata(elem), options || {});\r\n\t\t\tvar inst = $.extend({name: this.name, elem: elem, options: options}, this._instSettings(elem, options));\r\n\t\t\telem.data(this.name, inst); // Save instance against element\r\n\t\t\tthis._postAttach(elem, inst);\r\n\t\t\tthis.option(elem, options);\r\n\t\t},\r\n\r\n\t\t/** Retrieve additional instance settings.\r\n\t\t\tOverride this in a sub-class to provide extra settings.\r\n\t\t\tThese are added directly to the instance object.\r\n\t\t\tDefault attributes of an instance object are shown as properties below:\r\n\t\t\t@protected\r\n\t\t\t@param {jQuery} elem The current jQuery element.\r\n\t\t\t@param {object} options The instance options.\r\n\t\t\t@return {object} Any extra instance values.\r\n\t\t\t@property {Element} elem The element to which this instance applies.\r\n\t\t\t@property {string} name The name of this plugin.\r\n\t\t\t@property {object} options The accumulated options for this instance.\r\n\t\t\t@example _instSettings: function(elem, options) {\r\n  return {nav: elem.find(options.navSelector)};\r\n} */\r\n\t\t_instSettings: function(elem, options) { // jshint unused:false\r\n\t\t\treturn {};\r\n\t\t},\r\n\r\n\t\t/** Plugin specific post initialisation.\r\n\t\t\tOverride this in a sub-class to perform extra activities.\r\n\t\t\tThis is where you would implement your plugin's main functionality.\r\n\t\t\t@protected\r\n\t\t\t@param {jQuery} elem The current jQuery element.\r\n\t\t\t@param {object} inst The instance settings.\r\n\t\t\t@example _postAttach: function(elem, inst) {\r\n  elem.on('click.' + this.name, function() {\r\n    ...\r\n  });\r\n} */\r\n\t\t_postAttach: function(elem, inst) { // jshint unused:false\r\n\t\t},\r\n\t\t\r\n\t\t/** Retrieve metadata configuration from the element.\r\n\t\t\tMetadata is specified as an attribute:\r\n\t\t\t<code>data-&lt;pluginName>=\"&lt;option name>: '&lt;value>', ...\"</code>.\r\n\t\t\tDates should be specified as strings in this format: <code>'new Date(y, m-1, d)'</code>.\r\n\t\t\t@private\r\n\t\t\t@param {jQuery} elem The source element.\r\n\t\t\t@return {object} The inline configuration or {}. */\r\n\t\t_getMetadata: function(elem) {\r\n\t\t\ttry {\r\n\t\t\t\tvar data = elem.data(this.name.toLowerCase()) || '';\r\n\t\t\t\tdata = data.replace(/(\\\\?)'/g, function(e, t) {\r\n\t\t\t\t\treturn t ? '\\'' : '\"';\r\n\t\t\t\t}).replace(/([a-zA-Z0-9]+):/g, function(match, group, i) {\r\n\t\t\t\t\tvar count = data.substring(0, i).match(/\"/g); // Handle embedded ':'\r\n\t\t\t\t\treturn (!count || count.length % 2 === 0 ? '\"' + group + '\":' : group + ':');\r\n\t\t\t\t}).replace(/\\\\:/g, ':');\r\n\t\t\t\tdata = $.parseJSON('{' + data + '}');\r\n\t\t\t\tfor (var key in data) {\r\n\t\t\t\t\tif (data.hasOwnProperty(key)) {\r\n\t\t\t\t\t\tvar value = data[key];\r\n\t\t\t\t\t\tif (typeof value === 'string' && value.match(/^new Date\\(([-0-9,\\s]*)\\)$/)) { // Convert dates\r\n\t\t\t\t\t\t\tdata[key] = eval(value); // jshint ignore:line\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\treturn {};\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Retrieve the instance data for element.\r\n\t\t\t@protected\r\n\t\t\t@param {Element} elem The source element.\r\n\t\t\t@return {object} The instance data or <code>{}</code> if none. */\r\n\t\t_getInst: function(elem) {\r\n\t\t\treturn $(elem).data(this.name) || {};\r\n\t\t},\r\n\r\n\t\t/** Retrieve or reconfigure the settings for a plugin.\r\n\t\t\tIf new settings are provided they are applied to the instance options.\r\n\t\t\tIf an option name only is provided the value of that option is returned.\r\n\t\t\tIf no name or value is provided, all options are returned.\r\n\t\t\tOverride {@linkcode module:JQPlugin~_optionsChanged|_optionsChanged}\r\n\t\t\tfor plugin-specific processing when option values change.\r\n\t\t\t@param {Element} elem The source element.\r\n\t\t\t@param {object|string} [name] The collection of new option values or the name of a single option.\r\n\t\t\t@param {any} [value] The value for a single named option.\r\n\t\t\t@return {any|object} If retrieving a single value or all options.\r\n\t\t\t@example $(selector).plugin('option', 'name', value) // Set one option\r\n$(selector).plugin('option', {name: value, ...}) // Set multiple options\r\nvar value = $(selector).plugin('option', 'name') // Get one option\r\nvar options = $(selector).plugin('option') // Get all options */\r\n\t\toption: function(elem, name, value) {\r\n\t\t\telem = $(elem);\r\n\t\t\tvar inst = elem.data(this.name);\r\n\t\t\tvar options = name || {};\r\n\t\t\tif  (!name || (typeof name === 'string' && typeof value === 'undefined')) {\r\n\t\t\t\toptions = (inst || {}).options;\r\n\t\t\t\treturn (options && name ? options[name] : options);\r\n\t\t\t}\r\n\t\t\tif (!elem.hasClass(this._getMarker())) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (typeof name === 'string') {\r\n\t\t\t\toptions = {};\r\n\t\t\t\toptions[name] = value;\r\n\t\t\t}\r\n\t\t\tthis._optionsChanged(elem, inst, options);\r\n\t\t\t$.extend(inst.options, options);\r\n\t\t},\r\n\r\n\t\t/** Plugin specific options processing.\r\n\t\t\tOld value available in <code>inst.options[name]</code>, new value in <code>options[name]</code>.\r\n\t\t\tOverride this in a sub-class to perform extra activities.\r\n\t\t\t@protected\r\n\t\t\t@param {jQuery} elem The current jQuery element.\r\n\t\t\t@param {object} inst The instance settings.\r\n\t\t\t@param {object} options The new options.\r\n\t\t\t@example _optionsChanged: function(elem, inst, options) {\r\n  if (options.name != inst.options.name) {\r\n    elem.removeClass(inst.options.name).addClass(options.name);\r\n  }\r\n} */\r\n\t\t_optionsChanged: function(elem, inst, options) { // jshint unused:false\r\n\t\t},\r\n\r\n\t\t/** Remove all trace of the plugin.\r\n\t\t\tOverride {@linkcode module:JQPlugin~_preDestroy|_preDestroy} for plugin-specific processing.\r\n\t\t\t@param {Element} elem The source element.\r\n\t\t\t@example $(selector).plugin('destroy') */\r\n\t\tdestroy: function(elem) {\r\n\t\t\telem = $(elem);\r\n\t\t\tif (!elem.hasClass(this._getMarker())) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._preDestroy(elem, this._getInst(elem));\r\n\t\t\telem.removeData(this.name).removeClass(this._getMarker());\r\n\t\t},\r\n\r\n\t\t/** Plugin specific pre destruction.\r\n\t\t\tIt is invoked as part of the {@linkcode module:JQPlugin~destroy|destroy} processing.\r\n\t\t\tOverride this in a sub-class to perform extra activities and undo everything that was\r\n\t\t\tdone in the {@linkcode module:JQPlugin~_postAttach|_postAttach} or\r\n\t\t\t{@linkcode module:JQPlugin~_optionsChanged|_optionsChanged} functions.\r\n\t\t\t@protected\r\n\t\t\t@param {jQuery} elem The current jQuery element.\r\n\t\t\t@param {object} inst The instance settings.\r\n\t\t\t@example _preDestroy: function(elem, inst) {\r\n  elem.off('.' + this.name);\r\n} */\r\n\t\t_preDestroy: function(elem, inst) { // jshint unused:false\r\n\t\t}\r\n\t});\r\n\r\n\t/** Convert names from hyphenated to camel-case.\r\n\t\t@private\r\n\t\t@param {string} value The original hyphenated name.\r\n\t\t@return {string} The camel-case version. */\r\n\tfunction camelCase(name) {\r\n\t\treturn name.replace(/-([a-z])/g, function(match, group) {\r\n\t\t\treturn group.toUpperCase();\r\n\t\t});\r\n\t}\r\n\r\n\t/** Expose the plugin base.\r\n\t\t@namespace $.JQPlugin */\r\n\t$.JQPlugin = {\r\n\r\n\t\t/** Create a new collection plugin.\r\n\t\t\t@memberof $.JQPlugin\r\n\t\t\t@param {string} [superClass='JQPlugin'] The name of the parent class to inherit from.\r\n\t\t\t@param {object} overrides The property/function overrides for the new class.\r\n\t\t\t\tSee {@link module:JQPlugin|JQPlugin} for the base functionality.\r\n\t\t\t@example $.JQPlugin.createPlugin({ // Define the plugin\r\n  name: 'tabs',\r\n  defaultOptions: {selectedClass: 'selected'},\r\n  _initSettings: function(elem, options) { return {...}; },\r\n  _postAttach: function(elem, inst) { ... }\r\n});\r\n$('selector').tabs(); // And instantiate it */\r\n\t\tcreatePlugin: function(superClass, overrides) {\r\n\t\t\tif (typeof superClass === 'object') {\r\n\t\t\t\toverrides = superClass;\r\n\t\t\t\tsuperClass = 'JQPlugin';\r\n\t\t\t}\r\n\t\t\tsuperClass = camelCase(superClass);\r\n\t\t\tvar className = camelCase(overrides.name);\r\n\t\t\tJQClass.classes[className] = JQClass.classes[superClass].extend(overrides);\r\n\t\t\tnew JQClass.classes[className](); // jshint ignore:line\r\n\t\t}\r\n\t};\r\n\r\n})(jQuery);"],"file":"jquery.plugin-min.js"}